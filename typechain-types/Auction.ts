/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface AuctionInterface extends utils.Interface {
  contractName: "Auction";
  functions: {
    "activeAuctionOwners(address)": FunctionFragment;
    "auctionItems(uint256)": FunctionFragment;
    "createAuctionItem(uint256,string,uint256)": FunctionFragment;
    "endAuction(uint256)": FunctionFragment;
    "getActiveAuctioneer()": FunctionFragment;
    "getAuctionDuration()": FunctionFragment;
    "getAuctionItem(uint256)": FunctionFragment;
    "getConcurrentAuctionsPerUser()": FunctionFragment;
    "getCurrentTimestamp()": FunctionFragment;
    "getTokensToStake()": FunctionFragment;
    "owner()": FunctionFragment;
    "placeBid(uint256,uint256)": FunctionFragment;
    "relinquishTokensToOwner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAuctionDuration(uint256)": FunctionFragment;
    "setConcurrentAuctionsPerUser(uint256)": FunctionFragment;
    "setTokensToStake(uint256)": FunctionFragment;
    "stakeTokens(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "activeAuctionOwners",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionItems",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createAuctionItem",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveAuctioneer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getConcurrentAuctionsPerUser",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensToStake",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "placeBid",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "relinquishTokensToOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAuctionDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setConcurrentAuctionsPerUser",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokensToStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "activeAuctionOwners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAuctionItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endAuction", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActiveAuctioneer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConcurrentAuctionsPerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensToStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "placeBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "relinquishTokensToOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuctionDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConcurrentAuctionsPerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokensToStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AuctionItemCreated(uint256,string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuctionItemCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type AuctionItemCreatedEvent = TypedEvent<
  [BigNumber, string],
  { itemId: BigNumber; itemName: string }
>;

export type AuctionItemCreatedEventFilter =
  TypedEventFilter<AuctionItemCreatedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Auction extends BaseContract {
  contractName: "Auction";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AuctionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activeAuctionOwners(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { stakedAmount: BigNumber; isInitialized: boolean }
    >;

    auctionItems(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        boolean
      ] & {
        itemId: BigNumber;
        itemName: string;
        seller: string;
        reservePrice: BigNumber;
        highestBid: BigNumber;
        highestBidder: string;
        auctionEndTime: BigNumber;
        ended: boolean;
      }
    >;

    createAuctionItem(
      itemId: BigNumberish,
      itemName: string,
      reservePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    endAuction(
      itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getActiveAuctioneer(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber[], boolean]>;

    getAuctionDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAuctionItem(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        boolean
      ]
    >;

    getConcurrentAuctionsPerUser(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTokensToStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    placeBid(
      itemId: BigNumberish,
      bidAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    relinquishTokensToOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAuctionDuration(
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setConcurrentAuctionsPerUser(
      auctionCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokensToStake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeTokens(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  activeAuctionOwners(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean] & { stakedAmount: BigNumber; isInitialized: boolean }
  >;

  auctionItems(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      boolean
    ] & {
      itemId: BigNumber;
      itemName: string;
      seller: string;
      reservePrice: BigNumber;
      highestBid: BigNumber;
      highestBidder: string;
      auctionEndTime: BigNumber;
      ended: boolean;
    }
  >;

  createAuctionItem(
    itemId: BigNumberish,
    itemName: string,
    reservePrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  endAuction(
    itemId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getActiveAuctioneer(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber[], boolean]>;

  getAuctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

  getAuctionItem(
    itemId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      boolean
    ]
  >;

  getConcurrentAuctionsPerUser(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  getTokensToStake(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  placeBid(
    itemId: BigNumberish,
    bidAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  relinquishTokensToOwner(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAuctionDuration(
    duration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setConcurrentAuctionsPerUser(
    auctionCount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokensToStake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeTokens(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    activeAuctionOwners(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { stakedAmount: BigNumber; isInitialized: boolean }
    >;

    auctionItems(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        boolean
      ] & {
        itemId: BigNumber;
        itemName: string;
        seller: string;
        reservePrice: BigNumber;
        highestBid: BigNumber;
        highestBidder: string;
        auctionEndTime: BigNumber;
        ended: boolean;
      }
    >;

    createAuctionItem(
      itemId: BigNumberish,
      itemName: string,
      reservePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    endAuction(itemId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    getActiveAuctioneer(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber[], boolean]>;

    getAuctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getAuctionItem(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        boolean
      ]
    >;

    getConcurrentAuctionsPerUser(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    getTokensToStake(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    placeBid(
      itemId: BigNumberish,
      bidAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    relinquishTokensToOwner(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAuctionDuration(
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setConcurrentAuctionsPerUser(
      auctionCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokensToStake(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeTokens(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AuctionItemCreated(uint256,string)"(
      itemId?: BigNumberish | null,
      itemName?: null
    ): AuctionItemCreatedEventFilter;
    AuctionItemCreated(
      itemId?: BigNumberish | null,
      itemName?: null
    ): AuctionItemCreatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    activeAuctionOwners(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    auctionItems(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createAuctionItem(
      itemId: BigNumberish,
      itemName: string,
      reservePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    endAuction(
      itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getActiveAuctioneer(overrides?: CallOverrides): Promise<BigNumber>;

    getAuctionDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getAuctionItem(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConcurrentAuctionsPerUser(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    getTokensToStake(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    placeBid(
      itemId: BigNumberish,
      bidAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    relinquishTokensToOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAuctionDuration(
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setConcurrentAuctionsPerUser(
      auctionCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokensToStake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeTokens(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activeAuctionOwners(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctionItems(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createAuctionItem(
      itemId: BigNumberish,
      itemName: string,
      reservePrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    endAuction(
      itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getActiveAuctioneer(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuctionDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuctionItem(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConcurrentAuctionsPerUser(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokensToStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    placeBid(
      itemId: BigNumberish,
      bidAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    relinquishTokensToOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAuctionDuration(
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setConcurrentAuctionsPerUser(
      auctionCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokensToStake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeTokens(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
