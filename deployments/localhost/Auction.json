{
  "address": "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ObscurityToken",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "itemId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "itemName",
          "type": "string"
        }
      ],
      "name": "AuctionItemCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "activeAuctionOwners",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "stakedAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isInitialized",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "auctionItems",
      "outputs": [
        {
          "internalType": "string",
          "name": "itemId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "itemName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "itemDescription",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "hashOfImage",
          "type": "string"
        },
        {
          "internalType": "address payable",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "reservePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "highestBid",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "highestBidder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "auctionEndTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "ended",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "deliveryAddress",
          "type": "string"
        },
        {
          "internalType": "enum Auction.EscrowState",
          "name": "escrowState",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "yesVotes",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "noVotes",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "a",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "b",
          "type": "string"
        }
      ],
      "name": "compareStrings",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "itemId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "itemName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "itemDescription",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "hashOfImage",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "reservePrice",
          "type": "uint256"
        }
      ],
      "name": "createAuctionItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "itemId",
          "type": "string"
        }
      ],
      "name": "endAuction",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "getActiveAuctioneer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllAuctions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "itemId",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "itemName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "itemDescription",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "hashOfImage",
              "type": "string"
            },
            {
              "internalType": "address payable",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "reservePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "highestBid",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "highestBidder",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "auctionEndTime",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "ended",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "deliveryAddress",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "privateChatLogs",
              "type": "string[]"
            },
            {
              "internalType": "string[]",
              "name": "committeeChatLogs",
              "type": "string[]"
            },
            {
              "internalType": "enum Auction.EscrowState",
              "name": "escrowState",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "yesVotes",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "noVotes",
              "type": "uint8"
            }
          ],
          "internalType": "struct Auction.AuctionItem[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllDisputeAuctions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "itemId",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "itemName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "itemDescription",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "hashOfImage",
              "type": "string"
            },
            {
              "internalType": "address payable",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "reservePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "highestBid",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "highestBidder",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "auctionEndTime",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "ended",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "deliveryAddress",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "privateChatLogs",
              "type": "string[]"
            },
            {
              "internalType": "string[]",
              "name": "committeeChatLogs",
              "type": "string[]"
            },
            {
              "internalType": "enum Auction.EscrowState",
              "name": "escrowState",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "yesVotes",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "noVotes",
              "type": "uint8"
            }
          ],
          "internalType": "struct Auction.AuctionItem[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAuctionDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "itemId",
          "type": "string"
        }
      ],
      "name": "getAuctionItem",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "itemId",
          "type": "string"
        }
      ],
      "name": "getChatLogOfItem",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getConcurrentAuctionsPerUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "itemId",
          "type": "string"
        }
      ],
      "name": "getDeliveryAddress",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "getMyBidAuctions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "itemId",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "itemName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "itemDescription",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "hashOfImage",
              "type": "string"
            },
            {
              "internalType": "address payable",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "reservePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "highestBid",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "highestBidder",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "auctionEndTime",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "ended",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "deliveryAddress",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "privateChatLogs",
              "type": "string[]"
            },
            {
              "internalType": "string[]",
              "name": "committeeChatLogs",
              "type": "string[]"
            },
            {
              "internalType": "enum Auction.EscrowState",
              "name": "escrowState",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "yesVotes",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "noVotes",
              "type": "uint8"
            }
          ],
          "internalType": "struct Auction.AuctionItem[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "getMyOwnerAuctions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "itemId",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "itemName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "itemDescription",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "hashOfImage",
              "type": "string"
            },
            {
              "internalType": "address payable",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "reservePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "highestBid",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "highestBidder",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "auctionEndTime",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "ended",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "deliveryAddress",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "privateChatLogs",
              "type": "string[]"
            },
            {
              "internalType": "string[]",
              "name": "committeeChatLogs",
              "type": "string[]"
            },
            {
              "internalType": "enum Auction.EscrowState",
              "name": "escrowState",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "yesVotes",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "noVotes",
              "type": "uint8"
            }
          ],
          "internalType": "struct Auction.AuctionItem[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adr",
          "type": "address"
        }
      ],
      "name": "getPubKey",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokensToStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isCommitteeMember",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ownerAuctions",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "itemId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "bidAmount",
          "type": "uint256"
        }
      ],
      "name": "placeBid",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pubKeys",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "itemId",
          "type": "string"
        }
      ],
      "name": "raiseDispute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relinquishTokensToOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "itemId",
          "type": "string"
        }
      ],
      "name": "resolveDispute",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "itemId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "sendChat",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "itemId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "sendCommitteeChat",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "duration",
          "type": "uint64"
        }
      ],
      "name": "setAuctionDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "auctionCount",
          "type": "uint8"
        }
      ],
      "name": "setConcurrentAuctionsPerUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "itemId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "deliveryAddress",
          "type": "string"
        }
      ],
      "name": "setDeliveryAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "pubKey",
          "type": "string"
        }
      ],
      "name": "setPubKey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setTokensToStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stakeTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "itemId",
          "type": "string"
        },
        {
          "internalType": "enum Auction.EscrowState",
          "name": "nextState",
          "type": "uint8"
        }
      ],
      "name": "transitionEscrowState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "itemId",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "vote",
          "type": "uint8"
        }
      ],
      "name": "voteOnDispute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x897b35168182207ddb4dfbd2299ea112523bea899d32935246fab5b8263490b7",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318",
    "transactionIndex": 0,
    "gasUsed": "3806341",
    "logsBloom": "0x
    "blockHash": "0x1c159823c4c340cbb346ba8285864a666dbc034a1a4fad87e84ddcc0d17b3dc9",
    "transactionHash": "0x897b35168182207ddb4dfbd2299ea112523bea899d32935246fab5b8263490b7",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 12,
        "transactionHash": "0x897b35168182207ddb4dfbd2299ea112523bea899d32935246fab5b8263490b7",
        "address": "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x1c159823c4c340cbb346ba8285864a666dbc034a1a4fad87e84ddcc0d17b3dc9"
      }
    ],
    "blockNumber": 12,
    "cumulativeGasUsed": "3806341",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "ef934a76c57217b9d19a9617d7545315",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ObscurityToken\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"itemId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"itemName\",\"type\":\"string\"}],\"name\":\"AuctionItemCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"activeAuctionOwners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isInitialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"auctionItems\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"itemId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"itemName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"itemDescription\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"hashOfImage\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"highestBid\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"highestBidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"auctionEndTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"ended\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"deliveryAddress\",\"type\":\"string\"},{\"internalType\":\"enum Auction.EscrowState\",\"name\":\"escrowState\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"yesVotes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"noVotes\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"a\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"b\",\"type\":\"string\"}],\"name\":\"compareStrings\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"itemId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"itemName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"itemDescription\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"hashOfImage\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"}],\"name\":\"createAuctionItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"itemId\",\"type\":\"string\"}],\"name\":\"endAuction\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"getActiveAuctioneer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllAuctions\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"itemId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"itemName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"itemDescription\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"hashOfImage\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"highestBid\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"highestBidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"auctionEndTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"ended\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"deliveryAddress\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"privateChatLogs\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"committeeChatLogs\",\"type\":\"string[]\"},{\"internalType\":\"enum Auction.EscrowState\",\"name\":\"escrowState\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"yesVotes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"noVotes\",\"type\":\"uint8\"}],\"internalType\":\"struct Auction.AuctionItem[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllDisputeAuctions\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"itemId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"itemName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"itemDescription\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"hashOfImage\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"highestBid\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"highestBidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"auctionEndTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"ended\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"deliveryAddress\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"privateChatLogs\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"committeeChatLogs\",\"type\":\"string[]\"},{\"internalType\":\"enum Auction.EscrowState\",\"name\":\"escrowState\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"yesVotes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"noVotes\",\"type\":\"uint8\"}],\"internalType\":\"struct Auction.AuctionItem[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctionDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"itemId\",\"type\":\"string\"}],\"name\":\"getAuctionItem\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"itemId\",\"type\":\"string\"}],\"name\":\"getChatLogOfItem\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConcurrentAuctionsPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"itemId\",\"type\":\"string\"}],\"name\":\"getDeliveryAddress\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"getMyBidAuctions\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"itemId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"itemName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"itemDescription\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"hashOfImage\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"highestBid\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"highestBidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"auctionEndTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"ended\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"deliveryAddress\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"privateChatLogs\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"committeeChatLogs\",\"type\":\"string[]\"},{\"internalType\":\"enum Auction.EscrowState\",\"name\":\"escrowState\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"yesVotes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"noVotes\",\"type\":\"uint8\"}],\"internalType\":\"struct Auction.AuctionItem[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"getMyOwnerAuctions\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"itemId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"itemName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"itemDescription\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"hashOfImage\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"highestBid\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"highestBidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"auctionEndTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"ended\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"deliveryAddress\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"privateChatLogs\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"committeeChatLogs\",\"type\":\"string[]\"},{\"internalType\":\"enum Auction.EscrowState\",\"name\":\"escrowState\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"yesVotes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"noVotes\",\"type\":\"uint8\"}],\"internalType\":\"struct Auction.AuctionItem[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getPubKey\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokensToStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isCommitteeMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerAuctions\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"itemId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"}],\"name\":\"placeBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pubKeys\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"itemId\",\"type\":\"string\"}],\"name\":\"raiseDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relinquishTokensToOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"itemId\",\"type\":\"string\"}],\"name\":\"resolveDispute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"itemId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"sendChat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"itemId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"sendCommitteeChat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"}],\"name\":\"setAuctionDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"auctionCount\",\"type\":\"uint8\"}],\"name\":\"setConcurrentAuctionsPerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"itemId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"deliveryAddress\",\"type\":\"string\"}],\"name\":\"setDeliveryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"pubKey\",\"type\":\"string\"}],\"name\":\"setPubKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setTokensToStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"itemId\",\"type\":\"string\"},{\"internalType\":\"enum Auction.EscrowState\",\"name\":\"nextState\",\"type\":\"uint8\"}],\"name\":\"transitionEscrowState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"itemId\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"vote\",\"type\":\"uint8\"}],\"name\":\"voteOnDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Auction.sol\":\"Auction\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":300},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/governance/utils/IVotes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (governance/utils/IVotes.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\\n *\\n * _Available since v4.5._\\n */\\ninterface IVotes {\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /**\\n     * @dev Returns the current amount of votes that `account` has.\\n     */\\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of votes that `account` had at a specific moment in the past. If the `clock()` is\\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\\n     */\\n    function getPastVotes(address account, uint256 timepoint) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the total supply of votes available at a specific moment in the past. If the `clock()` is\\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     */\\n    function getPastTotalSupply(uint256 timepoint) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the delegate that `account` has chosen.\\n     */\\n    function delegates(address account) external view returns (address);\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`.\\n     */\\n    function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0x1618ddebe73377660f6da71afcba35d5ac4c4600918b3a381d9c6f37eba613eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0xac6c2efc64baccbde4904ae18ed45139c9aa8cff96d6888344d1e4d2eb8b659f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5805.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5805.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../governance/utils/IVotes.sol\\\";\\nimport \\\"./IERC6372.sol\\\";\\n\\ninterface IERC5805 is IERC6372, IVotes {}\\n\",\"keccak256\":\"0xfc12b717f6a2cd0d67adc8700097d4464d37f18ce933d4fc9c948ab6aec35e80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC6372.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC6372.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC6372 {\\n    /**\\n     * @dev Clock used for flagging checkpoints. Can be overridden to implement timestamp based checkpoints (and voting).\\n     */\\n    function clock() external view returns (uint48);\\n\\n    /**\\n     * @dev Description of the clock\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function CLOCK_MODE() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xcaea9aeda3816ba872358c828f4f01455c22ae48ced49c4c7d72bd74176c09b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../../utils/cryptography/EIP712.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /**\\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\\n     * to reserve a slot.\\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\",\"keccak256\":\"0x36c00327e3f9afd929cc2721aaa111ab57eff78a630cc364b279ad576b899295\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/ERC20Votes.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC20Permit.sol\\\";\\nimport \\\"../../../interfaces/IERC5805.sol\\\";\\nimport \\\"../../../utils/math/Math.sol\\\";\\nimport \\\"../../../utils/math/SafeCast.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\n\\n/**\\n * @dev Extension of ERC20 to support Compound-like voting and delegation. This version is more generic than Compound's,\\n * and supports token supply up to 2^224^ - 1, while COMP is limited to 2^96^ - 1.\\n *\\n * NOTE: If exact COMP compatibility is required, use the {ERC20VotesComp} variant of this module.\\n *\\n * This extension keeps a history (checkpoints) of each account's vote power. Vote power can be delegated either\\n * by calling the {delegate} function directly, or by providing a signature to be used with {delegateBySig}. Voting\\n * power can be queried through the public accessors {getVotes} and {getPastVotes}.\\n *\\n * By default, token balance does not account for voting power. This makes transfers cheaper. The downside is that it\\n * requires users to delegate to themselves in order to activate checkpoints and have their voting power tracked.\\n *\\n * _Available since v4.2._\\n */\\nabstract contract ERC20Votes is ERC20Permit, IERC5805 {\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint224 votes;\\n    }\\n\\n    bytes32 private constant _DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    mapping(address => address) private _delegates;\\n    mapping(address => Checkpoint[]) private _checkpoints;\\n    Checkpoint[] private _totalSupplyCheckpoints;\\n\\n    /**\\n     * @dev Clock used for flagging checkpoints. Can be overridden to implement timestamp based checkpoints (and voting).\\n     */\\n    function clock() public view virtual override returns (uint48) {\\n        return SafeCast.toUint48(block.number);\\n    }\\n\\n    /**\\n     * @dev Description of the clock\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function CLOCK_MODE() public view virtual override returns (string memory) {\\n        // Check that the clock was not modified\\n        require(clock() == block.number, \\\"ERC20Votes: broken clock mode\\\");\\n        return \\\"mode=blocknumber&from=default\\\";\\n    }\\n\\n    /**\\n     * @dev Get the `pos`-th checkpoint for `account`.\\n     */\\n    function checkpoints(address account, uint32 pos) public view virtual returns (Checkpoint memory) {\\n        return _checkpoints[account][pos];\\n    }\\n\\n    /**\\n     * @dev Get number of checkpoints for `account`.\\n     */\\n    function numCheckpoints(address account) public view virtual returns (uint32) {\\n        return SafeCast.toUint32(_checkpoints[account].length);\\n    }\\n\\n    /**\\n     * @dev Get the address `account` is currently delegating to.\\n     */\\n    function delegates(address account) public view virtual override returns (address) {\\n        return _delegates[account];\\n    }\\n\\n    /**\\n     * @dev Gets the current votes balance for `account`\\n     */\\n    function getVotes(address account) public view virtual override returns (uint256) {\\n        uint256 pos = _checkpoints[account].length;\\n        unchecked {\\n            return pos == 0 ? 0 : _checkpoints[account][pos - 1].votes;\\n        }\\n    }\\n\\n    /**\\n     * @dev Retrieve the number of votes for `account` at the end of `timepoint`.\\n     *\\n     * Requirements:\\n     *\\n     * - `timepoint` must be in the past\\n     */\\n    function getPastVotes(address account, uint256 timepoint) public view virtual override returns (uint256) {\\n        require(timepoint < clock(), \\\"ERC20Votes: future lookup\\\");\\n        return _checkpointsLookup(_checkpoints[account], timepoint);\\n    }\\n\\n    /**\\n     * @dev Retrieve the `totalSupply` at the end of `timepoint`. Note, this value is the sum of all balances.\\n     * It is NOT the sum of all the delegated votes!\\n     *\\n     * Requirements:\\n     *\\n     * - `timepoint` must be in the past\\n     */\\n    function getPastTotalSupply(uint256 timepoint) public view virtual override returns (uint256) {\\n        require(timepoint < clock(), \\\"ERC20Votes: future lookup\\\");\\n        return _checkpointsLookup(_totalSupplyCheckpoints, timepoint);\\n    }\\n\\n    /**\\n     * @dev Lookup a value in a list of (sorted) checkpoints.\\n     */\\n    function _checkpointsLookup(Checkpoint[] storage ckpts, uint256 timepoint) private view returns (uint256) {\\n        // We run a binary search to look for the last (most recent) checkpoint taken before (or at) `timepoint`.\\n        //\\n        // Initially we check if the block is recent to narrow the search range.\\n        // During the loop, the index of the wanted checkpoint remains in the range [low-1, high).\\n        // With each iteration, either `low` or `high` is moved towards the middle of the range to maintain the invariant.\\n        // - If the middle checkpoint is after `timepoint`, we look in [low, mid)\\n        // - If the middle checkpoint is before or equal to `timepoint`, we look in [mid+1, high)\\n        // Once we reach a single value (when low == high), we've found the right checkpoint at the index high-1, if not\\n        // out of bounds (in which case we're looking too far in the past and the result is 0).\\n        // Note that if the latest checkpoint available is exactly for `timepoint`, we end up with an index that is\\n        // past the end of the array, so we technically don't find a checkpoint after `timepoint`, but it works out\\n        // the same.\\n        uint256 length = ckpts.length;\\n\\n        uint256 low = 0;\\n        uint256 high = length;\\n\\n        if (length > 5) {\\n            uint256 mid = length - Math.sqrt(length);\\n            if (_unsafeAccess(ckpts, mid).fromBlock > timepoint) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(ckpts, mid).fromBlock > timepoint) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        unchecked {\\n            return high == 0 ? 0 : _unsafeAccess(ckpts, high - 1).votes;\\n        }\\n    }\\n\\n    /**\\n     * @dev Delegate votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) public virtual override {\\n        _delegate(_msgSender(), delegatee);\\n    }\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= expiry, \\\"ERC20Votes: signature expired\\\");\\n        address signer = ECDSA.recover(\\n            _hashTypedDataV4(keccak256(abi.encode(_DELEGATION_TYPEHASH, delegatee, nonce, expiry))),\\n            v,\\n            r,\\n            s\\n        );\\n        require(nonce == _useNonce(signer), \\\"ERC20Votes: invalid nonce\\\");\\n        _delegate(signer, delegatee);\\n    }\\n\\n    /**\\n     * @dev Maximum token supply. Defaults to `type(uint224).max` (2^224^ - 1).\\n     */\\n    function _maxSupply() internal view virtual returns (uint224) {\\n        return type(uint224).max;\\n    }\\n\\n    /**\\n     * @dev Snapshots the totalSupply after it has been increased.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual override {\\n        super._mint(account, amount);\\n        require(totalSupply() <= _maxSupply(), \\\"ERC20Votes: total supply risks overflowing votes\\\");\\n\\n        _writeCheckpoint(_totalSupplyCheckpoints, _add, amount);\\n    }\\n\\n    /**\\n     * @dev Snapshots the totalSupply after it has been decreased.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual override {\\n        super._burn(account, amount);\\n\\n        _writeCheckpoint(_totalSupplyCheckpoints, _subtract, amount);\\n    }\\n\\n    /**\\n     * @dev Move voting power when tokens are transferred.\\n     *\\n     * Emits a {IVotes-DelegateVotesChanged} event.\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\n        super._afterTokenTransfer(from, to, amount);\\n\\n        _moveVotingPower(delegates(from), delegates(to), amount);\\n    }\\n\\n    /**\\n     * @dev Change delegation for `delegator` to `delegatee`.\\n     *\\n     * Emits events {IVotes-DelegateChanged} and {IVotes-DelegateVotesChanged}.\\n     */\\n    function _delegate(address delegator, address delegatee) internal virtual {\\n        address currentDelegate = delegates(delegator);\\n        uint256 delegatorBalance = balanceOf(delegator);\\n        _delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveVotingPower(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _moveVotingPower(address src, address dst, uint256 amount) private {\\n        if (src != dst && amount > 0) {\\n            if (src != address(0)) {\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[src], _subtract, amount);\\n                emit DelegateVotesChanged(src, oldWeight, newWeight);\\n            }\\n\\n            if (dst != address(0)) {\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(_checkpoints[dst], _add, amount);\\n                emit DelegateVotesChanged(dst, oldWeight, newWeight);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        Checkpoint[] storage ckpts,\\n        function(uint256, uint256) view returns (uint256) op,\\n        uint256 delta\\n    ) private returns (uint256 oldWeight, uint256 newWeight) {\\n        uint256 pos = ckpts.length;\\n\\n        unchecked {\\n            Checkpoint memory oldCkpt = pos == 0 ? Checkpoint(0, 0) : _unsafeAccess(ckpts, pos - 1);\\n\\n            oldWeight = oldCkpt.votes;\\n            newWeight = op(oldWeight, delta);\\n\\n            if (pos > 0 && oldCkpt.fromBlock == clock()) {\\n                _unsafeAccess(ckpts, pos - 1).votes = SafeCast.toUint224(newWeight);\\n            } else {\\n                ckpts.push(Checkpoint({fromBlock: SafeCast.toUint32(clock()), votes: SafeCast.toUint224(newWeight)}));\\n            }\\n        }\\n    }\\n\\n    function _add(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    function _subtract(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(Checkpoint[] storage ckpts, uint256 pos) private pure returns (Checkpoint storage result) {\\n        assembly {\\n            mstore(0, ckpts.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4e560f86662b6f72ab76122fff53317677154f14bac4a80dbd46a54172b3abfa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant _FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(_FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc0e310c163edf15db45d4ff938113ab357f94fa86e61ea8e790853c4d2e13256\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../ShortStrings.sol\\\";\\nimport \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     *\\n     * _Available since v4.9._\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _name.toStringWithFallback(_nameFallback),\\n            _version.toStringWithFallback(_versionFallback),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x8432884527a7ad91e6eed1cfc5a0811ae2073e5bca107bd0ca442e9236b03dbd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/Auction.sol\":{\"content\":\"// contracts/Box.sol\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./ObscurityToken.sol\\\";\\r\\n\\r\\ncontract Auction is Ownable {\\r\\n    // enums\\r\\n\\r\\n    enum EscrowState {\\r\\n        AwaitingDeliveryAddress, // Waiting for winner to provide address\\r\\n        PreparingItem, // Seller preparing item\\r\\n        ItemOnDelivery, // Seller sent item on delivery\\r\\n        ItemReceived, // Buyer received the item\\r\\n        Dispute, // There is a dispute,\\r\\n        DisputeResolved, // Dispute has been resolved\\r\\n        Cancelled // Auction has been cancelled due to dispute\\r\\n    }\\r\\n\\r\\n    // structs\\r\\n\\r\\n    struct AuctionItem {\\r\\n        string itemId; // Unique identifier for the item\\r\\n        string itemName; // Name or description of the item\\r\\n        string itemDescription; // Description of the item\\r\\n        string hashOfImage; // Hash of the uploaded image to verify its authenticity\\r\\n        address payable seller; // Address of the seller\\r\\n        uint256 reservePrice; // Minimum price at which the item can be sold\\r\\n        uint256 highestBid; // Current highest bid\\r\\n        address payable highestBidder; // Address of the highest bidder\\r\\n        uint256 auctionEndTime; // Unix timestamp when the auction ends\\r\\n        bool ended; // Flag to indicate if the auction has ended\\r\\n        string deliveryAddress; // Delivery address of the winner, will be set by winner after auction ends\\r\\n        string[] privateChatLogs; // Chat log between winner and owner\\r\\n        string[] committeeChatLogs; // In case of dispute, discussion will be held here\\r\\n        EscrowState escrowState;\\r\\n        uint8 yesVotes; // Vote of committee members in favor of finalizing auction\\r\\n        uint8 noVotes; // Vote of committee member in favor of canceling auction\\r\\n    }\\r\\n\\r\\n    struct ActiveAuctioneer {\\r\\n        uint256 stakedAmount;\\r\\n        string[] activeAuctions;\\r\\n        bool isInitialized;\\r\\n    }\\r\\n\\r\\n    struct UserBids {\\r\\n        string[] auctionIds;\\r\\n        mapping(string => bool) auctionExists;\\r\\n    }\\r\\n\\r\\n    // fields\\r\\n    mapping(string => AuctionItem) public auctionItems;\\r\\n    mapping(address => ActiveAuctioneer) public activeAuctionOwners;\\r\\n    mapping(address => string) public pubKeys;\\r\\n    mapping(address => bool) public isCommitteeMember;\\r\\n    mapping(address => string[]) public ownerAuctions;\\r\\n    mapping(address => UserBids) userBidsMapping;\\r\\n\\r\\n\\r\\n    string[] auctionArr;\\r\\n    string[] disputeArr;\\r\\n    uint256 tokensToStake = 500 * (10 ** 18);\\r\\n    ObscurityToken token;\\r\\n\\r\\n    // fields that get edited with DAO votes\\r\\n    uint64 auctionDuration = 60 * 2; // 120 seconds\\r\\n    uint8 concurrentAuctionsPerUser = 2;\\r\\n\\r\\n    // events\\r\\n    event AuctionItemCreated(string indexed itemId, string itemName);\\r\\n\\r\\n    // modifiers\\r\\n    modifier itemExists(string calldata itemId) {\\r\\n        require(compareStrings(auctionItems[itemId].itemId, itemId), \\\"Item does not exist\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier stakedCoinRequired() {\\r\\n        require(\\r\\n            activeAuctionOwners[msg.sender].stakedAmount >= tokensToStake,\\r\\n            \\\"Not enough tokens staked to create an auction\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier belowAuctionCount() {\\r\\n        require(\\r\\n            activeAuctionOwners[msg.sender].activeAuctions.length < concurrentAuctionsPerUser,\\r\\n            \\\"You can't have any more active auctions\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isOwner(string calldata itemId) {\\r\\n        require(\\r\\n            auctionItems[itemId].seller == msg.sender,\\r\\n            \\\"Only auction owner can call this method\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isWinner(string calldata itemId) {\\r\\n        require(\\r\\n            (msg.sender == auctionItems[itemId].highestBidder) && (auctionItems[itemId].ended),\\r\\n            \\\"You haven't won the auction or its still in progress\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier hasPubKey() {\\r\\n        require(\\r\\n            bytes(pubKeys[msg.sender]).length == 44,\\r\\n            \\\"Please submit your eth wallet pubkey before using the system\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyCommitteeMember() {\\r\\n        require(isCommitteeMember[msg.sender], \\\"You are not an authorized committee member\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier hasDispute(string calldata itemId) {\\r\\n        require(\\r\\n            auctionItems[itemId].escrowState == EscrowState.Dispute,\\r\\n            \\\"This auction doesn't have a dispute\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(ObscurityToken _token) {\\r\\n        token = _token;\\r\\n        isCommitteeMember[0x90F79bf6EB2c4f870365E785982E1f101E93b906] = true;\\r\\n        isCommitteeMember[0x15d34AAf54267DB7D7c367839AAf71A00a2C6A65] = true;\\r\\n        isCommitteeMember[0x9965507D1a55bcC2695C58ba16FB37d819B0A4dc] = true;\\r\\n    }\\r\\n\\r\\n    // Functions to be called by DAO\\r\\n    function setAuctionDuration(uint64 duration) external onlyOwner {\\r\\n        auctionDuration = duration;\\r\\n    }\\r\\n\\r\\n    function setConcurrentAuctionsPerUser(uint8 auctionCount) external onlyOwner {\\r\\n        concurrentAuctionsPerUser = auctionCount;\\r\\n    }\\r\\n\\r\\n    function setTokensToStake(uint256 amount) external onlyOwner {\\r\\n        tokensToStake = amount;\\r\\n    }\\r\\n\\r\\n    // Auction functions\\r\\n\\r\\n    function stakeTokens(uint256 amount) external {\\r\\n        token.transferFrom(msg.sender, address(this), amount);\\r\\n        if (activeAuctionOwners[msg.sender].isInitialized) {\\r\\n            activeAuctionOwners[msg.sender].stakedAmount += amount;\\r\\n        } else {\\r\\n            string[] memory init;\\r\\n            activeAuctionOwners[msg.sender] = ActiveAuctioneer({\\r\\n                stakedAmount: amount,\\r\\n                activeAuctions: init,\\r\\n                isInitialized: true\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function relinquishTokensToOwner() external {\\r\\n        require(\\r\\n            activeAuctionOwners[msg.sender].activeAuctions.length == 0,\\r\\n            \\\"You can't redeem tokens while ongoing auctions persist\\\"\\r\\n        );\\r\\n        token.approve(address(this), activeAuctionOwners[msg.sender].stakedAmount);\\r\\n        token.transferFrom(address(this), msg.sender, activeAuctionOwners[msg.sender].stakedAmount);\\r\\n    }\\r\\n\\r\\n    function createAuctionItem(\\r\\n        string calldata itemId,\\r\\n        string calldata itemName,\\r\\n        string calldata itemDescription,\\r\\n        string calldata hashOfImage,\\r\\n        uint256 reservePrice\\r\\n    ) external stakedCoinRequired belowAuctionCount hasPubKey {\\r\\n        require(!compareStrings(itemId, auctionItems[itemId].itemId), \\\"Item already exists\\\");\\r\\n        require(reservePrice > 0, \\\"Reserve price must be greater than zero\\\");\\r\\n\\r\\n        uint256 auctionEndTime = block.timestamp + auctionDuration;\\r\\n        string[] memory init;\\r\\n        auctionItems[itemId] = AuctionItem({\\r\\n            itemId: itemId,\\r\\n            itemName: itemName,\\r\\n            itemDescription: itemDescription,\\r\\n            hashOfImage: hashOfImage,\\r\\n            seller: payable(msg.sender),\\r\\n            reservePrice: reservePrice,\\r\\n            highestBid: 0,\\r\\n            highestBidder: payable(address(0)),\\r\\n            auctionEndTime: auctionEndTime,\\r\\n            ended: false,\\r\\n            deliveryAddress: \\\"\\\",\\r\\n            privateChatLogs: init,\\r\\n            committeeChatLogs: init,\\r\\n            escrowState: EscrowState.AwaitingDeliveryAddress,\\r\\n            yesVotes: 0,\\r\\n            noVotes: 0\\r\\n        });\\r\\n\\r\\n        activeAuctionOwners[msg.sender].activeAuctions.push(itemId);\\r\\n        auctionArr.push(itemId);\\r\\n        ownerAuctions[msg.sender].push(itemId);\\r\\n        emit AuctionItemCreated(itemId, itemName);\\r\\n    }\\r\\n\\r\\n    // Function to place a bid\\r\\n    function placeBid(\\r\\n        string calldata itemId,\\r\\n        uint256 bidAmount\\r\\n    ) external payable itemExists(itemId) hasPubKey {\\r\\n        AuctionItem storage item = auctionItems[itemId];\\r\\n\\r\\n        require(item.seller != msg.sender, \\\"Owner can't bid on their auctions\\\");\\r\\n        require(item.reservePrice < bidAmount, \\\"Bid must be higher than the reserve price\\\");\\r\\n        require(!item.ended, \\\"Auction has ended\\\");\\r\\n        require(block.timestamp < item.auctionEndTime, \\\"Auction has expired\\\");\\r\\n        require(bidAmount > item.highestBid, \\\"Bid must be higher than the current highest bid\\\");\\r\\n\\r\\n        // Transfer the ERC-20 tokens from the bidder to the contract\\r\\n        token.transferFrom(msg.sender, address(this), bidAmount);\\r\\n\\r\\n        // Refund the previous highest bidder\\r\\n        if (item.highestBidder != address(0)) {\\r\\n            token.transfer(item.highestBidder, item.highestBid);\\r\\n        }\\r\\n\\r\\n        item.highestBid = bidAmount;\\r\\n        item.highestBidder = payable(msg.sender);\\r\\n        if ((item.auctionEndTime - block.timestamp) <= 30) {\\r\\n            auctionItems[itemId].auctionEndTime =\\r\\n                30 -\\r\\n                (item.auctionEndTime - block.timestamp) +\\r\\n                item.auctionEndTime;\\r\\n        }\\r\\n        if(!userBidsMapping[msg.sender].auctionExists[itemId]){\\r\\n            userBidsMapping[msg.sender].auctionIds.push(itemId);\\r\\n            userBidsMapping[msg.sender].auctionExists[itemId] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Function to end an auction and finalize the highest bidder\\r\\n    function endAuction(string calldata itemId) external payable itemExists(itemId) {\\r\\n        AuctionItem storage item = auctionItems[itemId];\\r\\n\\r\\n        require(!item.ended, \\\"Auction has already ended\\\");\\r\\n        require(block.timestamp >= item.auctionEndTime, \\\"Auction has not yet ended\\\");\\r\\n        require(\\r\\n            msg.sender == item.seller || msg.sender == item.highestBidder,\\r\\n            \\\"Only the seller or highest bidder can end the auction\\\"\\r\\n        );\\r\\n        item.ended = true;\\r\\n        string[] storage activeAuctionsArr = activeAuctionOwners[msg.sender].activeAuctions;\\r\\n        for (uint256 i = 0; i < activeAuctionsArr.length; i++) {\\r\\n            if (compareStrings(itemId, item.itemId)) {\\r\\n                activeAuctionsArr[i] = activeAuctionsArr[activeAuctionsArr.length - 1];\\r\\n                activeAuctionsArr.pop();\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if (item.highestBid == 0) {\\r\\n            return;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function sendChat(string calldata itemId, string calldata message) external itemExists(itemId) {\\r\\n        AuctionItem storage item = auctionItems[itemId];\\r\\n        require(\\r\\n            (item.highestBidder == msg.sender || msg.sender == item.seller) && item.ended,\\r\\n            \\\"Auction has not ended yet, or you are not the winner or owner of the item\\\"\\r\\n        );\\r\\n        item.privateChatLogs.push(message);\\r\\n    }\\r\\n\\r\\n    function sendCommitteeChat(\\r\\n        string calldata itemId,\\r\\n        string calldata message\\r\\n    ) external itemExists(itemId) {\\r\\n        AuctionItem storage item = auctionItems[itemId];\\r\\n        require(\\r\\n            item.ended &&\\r\\n                (isCommitteeMember[msg.sender] ||\\r\\n                    (item.highestBidder == msg.sender || msg.sender == item.seller)),\\r\\n            \\\"You do not have privileges to chat in this dispute\\\"\\r\\n        );\\r\\n        item.committeeChatLogs.push(message);\\r\\n    }\\r\\n\\r\\n    // GETTERS\\r\\n\\r\\n\\r\\n    function getMyBidAuctions(address sender) external view returns (AuctionItem[] memory) {\\r\\n        string[] memory itemArray = userBidsMapping[sender].auctionIds;\\r\\n        AuctionItem[] memory items = new AuctionItem[](itemArray.length);\\r\\n        for(uint i = 0; i<itemArray.length; i++){\\r\\n            items[i] = auctionItems[itemArray[i]];\\r\\n        }\\r\\n        return items;\\r\\n    }\\r\\n\\r\\n    function getMyOwnerAuctions (address sender) external view returns (AuctionItem[] memory) {\\r\\n        string[] memory itemArray = ownerAuctions[sender];\\r\\n        AuctionItem[] memory items = new AuctionItem[](itemArray.length);\\r\\n        for(uint i = 0; i<itemArray.length; i++){\\r\\n            items[i] = auctionItems[itemArray[i]];\\r\\n        }\\r\\n        return items;\\r\\n    }\\r\\n\\r\\n    // Function to get information about a specific auction item\\r\\n    function getAuctionItem(\\r\\n        string calldata itemId\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        itemExists(itemId)\\r\\n        returns (\\r\\n            string memory,\\r\\n            string memory,\\r\\n            address payable,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            address payable,\\r\\n            uint256,\\r\\n            bool\\r\\n        )\\r\\n    {\\r\\n        AuctionItem storage item = auctionItems[itemId];\\r\\n\\r\\n        return (\\r\\n            item.itemId,\\r\\n            item.itemName,\\r\\n            item.seller,\\r\\n            item.reservePrice,\\r\\n            item.highestBid,\\r\\n            item.highestBidder,\\r\\n            item.auctionEndTime,\\r\\n            item.ended\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getDeliveryAddress(\\r\\n        string calldata itemId\\r\\n    ) external view itemExists(itemId) isOwner(itemId) returns (string memory) {\\r\\n        return auctionItems[itemId].deliveryAddress;\\r\\n    }\\r\\n\\r\\n    function getActiveAuctioneer(address sender) external view returns (uint256, string[] memory, bool) {\\r\\n        ActiveAuctioneer storage auctioneer = activeAuctionOwners[sender];\\r\\n        return (auctioneer.stakedAmount, auctioneer.activeAuctions, auctioneer.isInitialized);\\r\\n    }\\r\\n\\r\\n    function getTokensToStake() external view returns (uint256) {\\r\\n        return tokensToStake;\\r\\n    }\\r\\n\\r\\n    function getConcurrentAuctionsPerUser() external view returns (uint256) {\\r\\n        return concurrentAuctionsPerUser;\\r\\n    }\\r\\n\\r\\n    function getAuctionDuration() external view returns (uint256) {\\r\\n        return auctionDuration;\\r\\n    }\\r\\n\\r\\n    // Function to get the current block timestamp\\r\\n    function getCurrentTimestamp() external view returns (uint256) {\\r\\n        return block.timestamp;\\r\\n    }\\r\\n\\r\\n    function getChatLogOfItem(\\r\\n        string calldata itemId\\r\\n    ) external view itemExists(itemId) returns (string[] memory) {\\r\\n        AuctionItem memory item = auctionItems[itemId];\\r\\n        require(\\r\\n            (item.highestBidder == msg.sender || msg.sender == item.seller) && item.ended,\\r\\n            \\\"Auction has not ended yet, or you are not the winner or owner of the item\\\"\\r\\n        );\\r\\n\\r\\n        return item.privateChatLogs;\\r\\n    }\\r\\n\\r\\n    function getPubKey(address adr) external view returns (string memory) {\\r\\n        return pubKeys[adr];\\r\\n    }\\r\\n\\r\\n    function getAllAuctions() external view returns (AuctionItem[] memory) {\\r\\n        AuctionItem[] memory items = new AuctionItem[](auctionArr.length);\\r\\n        for (uint i = 0; i < auctionArr.length; i++) {\\r\\n            items[i] = auctionItems[auctionArr[i]];\\r\\n        }\\r\\n        return items;\\r\\n    }\\r\\n\\r\\n    function getAllDisputeAuctions() external view returns (AuctionItem[] memory) {\\r\\n        AuctionItem[] memory items = new AuctionItem[](disputeArr.length);\\r\\n        for (uint i = 0; i < auctionArr.length; i++) {\\r\\n            items[i] = auctionItems[disputeArr[i]];\\r\\n        }\\r\\n        return items;\\r\\n    }\\r\\n\\r\\n    // SETTERS\\r\\n\\r\\n    function setDeliveryAddress(\\r\\n        string calldata itemId,\\r\\n        string memory deliveryAddress\\r\\n    ) external itemExists(itemId) isWinner(itemId) {\\r\\n        AuctionItem storage item = auctionItems[itemId];\\r\\n        item.deliveryAddress = deliveryAddress;\\r\\n    }\\r\\n\\r\\n    function setPubKey(string calldata pubKey) external {\\r\\n        pubKeys[msg.sender] = pubKey;\\r\\n    }\\r\\n\\r\\n    // Escrow Functions\\r\\n\\r\\n    function transitionEscrowState(\\r\\n        string calldata itemId,\\r\\n        EscrowState nextState\\r\\n    ) external itemExists(itemId) {\\r\\n        AuctionItem storage item = auctionItems[itemId];\\r\\n        require(item.ended, \\\"Auction has not ended yet\\\");\\r\\n        require(\\r\\n            item.escrowState != EscrowState.Dispute,\\r\\n            \\\"Cant resume escrow processes without dispute resolution\\\"\\r\\n        );\\r\\n        require(\\r\\n            (msg.sender == item.seller &&\\r\\n                nextState == EscrowState.PreparingItem &&\\r\\n                (item.escrowState == EscrowState.AwaitingDeliveryAddress ||\\r\\n                    item.escrowState == EscrowState.DisputeResolved)) ||\\r\\n                (msg.sender == item.seller &&\\r\\n                    nextState == EscrowState.ItemOnDelivery &&\\r\\n                    (item.escrowState == EscrowState.PreparingItem ||\\r\\n                        item.escrowState == EscrowState.DisputeResolved)) ||\\r\\n                (msg.sender == item.highestBidder &&\\r\\n                    nextState == EscrowState.ItemReceived &&\\r\\n                    (item.escrowState == EscrowState.ItemOnDelivery ||\\r\\n                        item.escrowState == EscrowState.DisputeResolved)) ||\\r\\n                (msg.sender == item.highestBidder &&\\r\\n                    nextState == EscrowState.ItemReceived &&\\r\\n                    (item.escrowState == EscrowState.ItemOnDelivery ||\\r\\n                        item.escrowState == EscrowState.DisputeResolved)),\\r\\n            \\\"Invalid state transition\\\"\\r\\n        );\\r\\n\\r\\n        require(bytes(item.deliveryAddress).length > 0, \\\"Please set a delivery address first\\\");\\r\\n\\r\\n        item.escrowState = nextState;\\r\\n        if (nextState == EscrowState.ItemReceived) {\\r\\n            token.transfer(item.seller, item.highestBid);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function raiseDispute(string calldata itemId) external itemExists(itemId) {\\r\\n        AuctionItem storage item = auctionItems[itemId];\\r\\n        require(item.escrowState != EscrowState.Dispute, \\\"There is already a risen dispute\\\");\\r\\n        require(\\r\\n            (item.highestBidder == msg.sender || msg.sender == item.seller) && item.ended,\\r\\n            \\\"Auction has not ended yet, or you are not the winner or owner of the item\\\"\\r\\n        );\\r\\n        item.escrowState = EscrowState.Dispute;\\r\\n        disputeArr.push(itemId);\\r\\n    }\\r\\n\\r\\n    function voteOnDispute(\\r\\n        string calldata itemId,\\r\\n        uint8 vote\\r\\n    ) external itemExists(itemId) onlyCommitteeMember hasDispute(itemId) {\\r\\n        AuctionItem storage item = auctionItems[itemId];\\r\\n        if (vote == 1) {\\r\\n            item.yesVotes++;\\r\\n        } else {\\r\\n            item.noVotes++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function resolveDispute(\\r\\n        string calldata itemId\\r\\n    ) external payable itemExists(itemId) hasDispute(itemId) onlyCommitteeMember {\\r\\n        AuctionItem storage item = auctionItems[itemId];\\r\\n        if (item.yesVotes >= item.noVotes) {\\r\\n            token.transfer(item.seller, item.highestBid);\\r\\n            item.escrowState = EscrowState.DisputeResolved;\\r\\n        } else {\\r\\n            token.transfer(item.highestBidder, item.highestBid);\\r\\n            item.escrowState = EscrowState.Cancelled;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Utils\\r\\n    function compareStrings(string memory a, string memory b) public pure returns (bool) {\\r\\n        return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1e34a492956286eb222d5f0cf61f25df327bfe151c95f11335ab0e190b7a2c28\",\"license\":\"MIT\"},\"contracts/ObscurityToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol\\\";\\r\\n\\r\\ncontract ObscurityToken is ERC20Votes {\\r\\n  uint256 public s_maxSupply = 1000000 * (10**18);\\r\\n\\r\\n  constructor() ERC20(\\\"ObscurityToken\\\", \\\"OT\\\") ERC20Permit(\\\"ObscurityToken\\\") {\\r\\n    _mint(msg.sender, s_maxSupply);\\r\\n  }\\r\\n\\r\\n  // The functions below are overrides required by Solidity.\\r\\n\\r\\n  function _afterTokenTransfer(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 amount\\r\\n  ) internal override(ERC20Votes) {\\r\\n    super._afterTokenTransfer(from, to, amount);\\r\\n  }\\r\\n\\r\\n  function _mint(address to, uint256 amount) internal override(ERC20Votes) {\\r\\n    super._mint(to, amount);\\r\\n  }\\r\\n\\r\\n  function _burn(address account, uint256 amount) internal override(ERC20Votes) {\\r\\n    super._burn(account, amount);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x3010584667e8d4e78b40a461a43644219226754328ed05d40ab90470ffad71c1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080346200014257601f620042b238819003918201601f19168301916001600160401b0383118484101762000147578084926020946040528339810103126200014257516001600160a01b039081811690819003620001425760008054336001600160a01b0319821681178355604051949293929091167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08480a3681b1ae4d6e2ef50000060095567400000000000000f60a31b9062ffffff60e81b600a54161717600a557390f79bf6eb2c4f870365e785982e1f101e93b90681526004602052600160408083209260ff199383858254161790557315d34aaf54267db7d7c367839aaf71a00a2c6a6581528181208385825416179055739965507d1a55bcc2695c58ba16fb37d819b0a4dc8152209182541617905561415490816200015e8239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b60003560e01c908163016544aa14612e1e5750806305f3b3f714612d1857806307412e9c14612cd15780631f49c291146120d35780633098662e146120375780634129027314611fcb578063676202fe14611f5d5780636c9230db14611f42578063715018a614611ee9578063725a3b4b14611d825780637547c7a314611b2a57806378cb51af14611b005780637c812b3914611aa75780637f38d86514611a6257806383c27150146118a757806388624ab3146118835780638aaf2761146118625780638da5cb5b1461183b5780638f2238ba1461167d5780639211735b14611537578063955ab3371461143b5780639d6271a01461132e5780639f19360d14611116578063a4bdc06e14610fab578063a7eaa24114610b85578063bed34bba14610b2b578063c1d733db14610a0f578063cbd2bdfd1461088f578063ce2ba9bf14610820578063d1b8b4bf146101c1578063d31f371e146106a9578063d8bcd0c91461068b578063e636d84b1461064c578063ee54507b146104b5578063f1d273c314610329578063f2fde38b14610260578063fb346ea0146102185763fce9512a146101c157600080fd5b34610213576020366003190112610213576001600160a01b036101e261330b565b16600052600360205261020f6101fb60406000206133b0565b60405191829160208352602083019061329c565b0390f35b600080fd5b34610213576020366003190112610213576001600160a01b0361023961330b565b16600052600260205260408060002060ff6002825492015416825191825215156020820152f35b346102135760203660031901126102135761027961330b565b6102816136b5565b6001600160a01b038091169081156102d557600054826bffffffffffffffffffffffff60a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b3461021357602080600319360112610213576001600160a01b03908161034d61330b565b166000526006908181526103646040600020613e49565b9161036f8351613e9e565b9360005b84518110156104a7578061039361038d6104a29388613f61565b5161368f565b600d604051916103a283613373565b6103ab816133b0565b83526103b9600182016133b0565b888401526103c9600282016133b0565b60408401526103da600382016133b0565b6060840152856004820154166080840152600581015460a08401528681015460c08401528560078201541660e08401526008908181015461010085015260ff928184600981940154161515610120870152610437600a82016133b0565b610140870152610449600b8201613e49565b61016087015261045b600c8201613e49565b610180870152015480926104758383166101a08801613878565b1c166101c084015260101c166101e08201526104918289613f61565b5261049c8188613f61565b506139de565b610373565b6040518061020f88826134bf565b346102135760003660031901126102135760088054906104d482613e9e565b916000916007918254935b8481106104f4576040518061020f88826134bf565b8181101561063657610631908360005261052f817ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee301613f75565b6040519061053c82613373565b610545816133b0565b8252610553600182016133b0565b6020830152610564600282016133b0565b6040830152610575600382016133b0565b60608301526001600160a01b03806004830154166080840152600582015460a0840152600682015460c0840152878201541660e083015285810154610100830152600d60ff918260098201541615156101208501526105d6600a82016133b0565b6101408501526105e8600b8201613e49565b6101608501526105fa600c8201613e49565b61018085015201546106128282166101a08501613878565b8181881c166101c084015260101c166101e08201526104918289613f61565b6104df565b634e487b7160e01b600052603260045260246000fd5b34610213576020366003190112610213576001600160a01b0361066d61330b565b166000526004602052602060ff604060002054166040519015158152f35b34610213576000366003190112610213576020600954604051908152f35b34610213576020366003190112610213576004356001600160401b038111610213576106d9903690600401613671565b60405181818093516020819301916106f092613279565b810160018152036020019020610705816133b0565b610711600183016133b0565b9161071e600282016133b0565b9061072b600382016133b0565b6001600160a01b0390816004840154169160058401549060068501549060078601541690600886015492600987015460ff1694600a880161076b906133b0565b97600d0154986040519b8c9b8c6101c08091528d016107899161329c565b8c810360208e015261079a9161329c565b8b810360408d01526107ab9161329c565b8a810360608c01526107bc9161329c565b9560808a015260a089015260c088015260e087015261010086015215156101208501528381036101408501526107f19161329c565b90610803610160840160ff83166134b2565b8060081c60ff1661018084015260101c60ff166101a08301520390f35b6020366003190112610213576004356001600160401b0381116102135761084e61088d91369060040161324c565b906108886108836108726040518585823760208187810160018152030190206133b0565b61087d36868661362b565b906140c9565b61398f565b613ac3565b005b3461021357600036600319011261021357600780546108ad81613e9e565b9160005b8281106108c6576040518061020f86826134bf565b610a0a90826000526108f9817fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801613f75565b600d6040519161090883613373565b610911816133b0565b835261091f600182016133b0565b6020840152610930600282016133b0565b6040840152610941600382016133b0565b60608401526001600160a01b03806004830154166080850152600582015460a0850152600682015460c0850152868201541660e08401526008908181015461010085015260ff9281846009819401541615156101208701526109a5600a82016133b0565b6101408701526109b7600b8201613e49565b6101608701526109c9600c8201613e49565b610180870152015480926109e38383166101a08801613878565b1c166101c084015260101c166101e08201526109ff8287613f61565b5261049c8186613f61565b6108b1565b34610213576020610a1f366132c1565b92610a50610883610a4560409794975186858237858188810160018152030190206133b0565b61087d36878661362b565b826040519384928337810160018152030190209160ff60098401541680610ae3575b15610a8357600c61088d930161395f565b60405162461bcd60e51b815260206004820152603260248201527f596f7520646f206e6f7420686176652070726976696c6567657320746f206368604482015271617420696e2074686973206469737075746560701b6064820152608490fd5b5033600052600460205260ff6040600020541680610a7257506001600160a01b03338160078601541614908115610b1b575b50610a72565b9050600484015416331484610b15565b34610213576040366003190112610213576001600160401b0360043581811161021357610b5c903690600401613671565b906024359081116102135760209161087d610b7b923690600401613671565b6040519015158152f35b6040366003190112610213576004356001600160401b03811161021357610bb090369060040161324c565b90602490813592604051928183853781840194610bec610883610be1876001998a81526020998a91030190206133b0565b61087d36878961362b565b3360005260038552610c0d602c610c07604060002054613339565b146137ed565b60405183858237858185810189815203019020906001600160a01b0390338260048501541614610f5d578060058401541015610f075760ff600984015416610ecf5760088301928354421015610e955760068101908154831115610e3957600a546040516323b872dd60e01b81523360048201523060248201526044810185905291908a90839060649082906000908a165af1918215610e1057600792610e1c575b500192888185541680610d9a575b5050505580546001600160a01b031916331790555490601e610cdf42846139d1565b1115610d47575b5050336000526006835260ff610d0385604060002001838561385f565b541615610d0c57005b6006610d3a9333600052818152610d288385604060002061395f565b3360005252836040600020019161385f565b805460ff19169091179055005b610d5142836139d1565b601e0390601e8211610d86575090610d68916137ca565b60086040518385823785818581018981520301902001558480610ce6565b634e487b7160e01b60009081526011600452fd5b600a54845460405163a9059cbb60e01b81526001600160a01b039390931660048401526024830152909283916044918391600091165af18015610e1057610de3575b8881610cbd565b610e0290893d8b11610e09575b610dfa818361338f565b81019061370d565b5089610ddc565b503d610df0565b6040513d6000823e3d90fd5b610e32908b3d8d11610e0957610dfa818361338f565b508b610caf565b60405162461bcd60e51b8152600481018a9052602f818801527f426964206d75737420626520686967686572207468616e20746865206375727260448201526e195b9d081a1a59da195cdd08189a59608a1b6064820152608490fd5b60405162461bcd60e51b81526004810189905260138187015272105d58dd1a5bdb881a185cc8195e1c1a5c9959606a1b6044820152606490fd5b60405162461bcd60e51b81526004810188905260118186015270105d58dd1a5bdb881a185cc8195b991959607a1b6044820152606490fd5b60405162461bcd60e51b8152600481018890526029818601527f426964206d75737420626520686967686572207468616e20746865207265736560448201526872766520707269636560b81b6064820152608490fd5b60405162461bcd60e51b8152600481018890526021818601527f4f776e65722063616e277420626964206f6e2074686569722061756374696f6e6044820152607360f81b6064820152608490fd5b3461021357600036600319011261021357336000526020600281526001604060002001546110ac576001600160a01b0360008282600a54163383526002825260446040842054604051948593849263095ea7b360e01b845230600485015260248401525af18015610e105760009284926110699261108f575b50600a54338086526002855260408087205490516323b872dd60e01b815230600482015260248101929092526044820152948593929091169183919082906064820190565b03925af18015610e105761107957005b8161088d92903d10610e0957610dfa818361338f565b6110a590843d8611610e0957610dfa818361338f565b5085611024565b6084906040519062461bcd60e51b82526004820152603660248201527f596f752063616e27742072656465656d20746f6b656e73207768696c65206f6e60448201527f676f696e672061756374696f6e732070657273697374000000000000000000006064820152fd5b34610213576040366003190112610213576001600160401b036004358181116102135761114790369060040161324c565b9160243581811161021357611160903690600401613671565b9260405190808483378082019361118b610883610872856001988981526020978891030190206133b0565b6001600160a01b0360076040518484823785818681018a81520301902001541633148061130e575b156112a3579082600a928260405193849283378101878152030190200193805192831161128d576111ee836111e88754613339565b87613785565b81601f841160011461122a575092829391839260009461121f575b50501b916000199060031b1c1916179055600080f35b015192508580611209565b919083601f1981168760005284600020946000905b88838310611273575050501061125a575b505050811b019055005b015160001960f88460031b161c19169055838080611250565b85870151885590960195948501948793509081019061123f565b634e487b7160e01b600052604160045260246000fd5b60405162461bcd60e51b815260048101849052603460248201527f596f7520686176656e277420776f6e207468652061756374696f6e206f72206960448201527f7473207374696c6c20696e2070726f67726573730000000000000000000000006064820152608490fd5b5060ff60096040518484823785818681018a8152030190200154166111b3565b3461021357602080600319360112610213576001600160a01b03908161135261330b565b166000526005908181526113696040600020613e49565b916113748351613e9e565b9360005b84518110156104a7578061139261038d6114369388613f61565b600d604051916113a183613373565b6113aa816133b0565b83526113b8600182016133b0565b888401526113c8600282016133b0565b60408401526113d9600382016133b0565b60608401528560048201541660808401528681015460a0840152600681015460c08401528560078201541660e08401526008908181015461010085015260ff928184600981940154161515610120870152610437600a82016133b0565b611378565b34610213576020366003190112610213576004356001600160401b03811161021357602061147061150492369060040161324c565b9190611494610883610a4560405186858237858188810160018152030190206133b0565b826040519384928337810160018152030190206001600160a01b03806004830154169060058301549060068401549060078501541660088501549160ff600987015416936115126114f060016114e98a6133b0565b99016133b0565b604051998a99610100808c528b019061329c565b9089820360208b015261329c565b9560408801526060870152608086015260a085015260c0840152151560e08301520390f35b34610213576040366003190112610213576004356001600160401b0381116102135761156790369060040161324c565b906024359160ff8316809303610213576115a561088361159a6040518486823760208186810160018152030190206133b0565b61087d36858761362b565b3360005260046020526115bf60ff60406000205416614001565b60ff600d6040518385823760208185810160018152030190200154166007811015611667576001926115f5600460209314614060565b826040519384928337810184815203019020910361163957600d61088d910161162460ff825460081c166140b8565b61ff0082549160081b169061ff001916179055565b600d61088d910161165060ff825460101c166140b8565b62ff000082549160101b169062ff00001916179055565b634e487b7160e01b600052602160045260246000fd5b602080600319360112610213576004356001600160401b038111610213576116a990369060040161324c565b906116cc61088361087260405185858237868187810160018152030190206133b0565b60ff600d6040518484823785818681016001815203019020015416906007821015611667576116fe6004859314614060565b336000526004825261171760ff60406000205416614001565b8260405193849283378101600181520301902090600d82019181835460ff808260101c169160081c1610156000146117c257600a5460048381015460069094015460405163a9059cbb60e01b81526001600160a01b039586169281019290925260248201529283916044918391600091165af18015610e10576117a4575b5050805460ff19166005179055005b816117ba92903d10610e0957610dfa818361338f565b508180611795565b600a54600783015460069093015460405163a9059cbb60e01b81526001600160a01b03948516600482015260248101919091529283916044918391600091165af18015610e105761181d575b5050805460ff19166006179055005b8161183392903d10610e0957610dfa818361338f565b50818061180e565b346102135760003660031901126102135760206001600160a01b0360005416604051908152f35b346102135760203660031901126102135761187b6136b5565b600435600955005b3461021357600036600319011261021357602060ff600a5460e01c16604051908152f35b3461021357602080600319360112610213576004356001600160401b038111610213576118d98291369060040161324c565b91906118fd610883610a4560405186858237858188810160018152030190206133b0565b82604051938492833781016001815203019020611a3460405161191f81613373565b611928836133b0565b8152611936600184016133b0565b84820152611946600284016133b0565b6040820152611957600384016133b0565b60608201526001600160a01b0390816004850154169160808201928352600585015460a0830152600685015460c0830152808060078701541660e08401908152600887015461010085015260ff60098801541693610120810194151585526119c1600a89016133b0565b6101408201526101e060ff600d6119da600b8c01613e49565b9a61016085019b8c526119ef600c8201613e49565b6101808601520154611a078282166101a08601613878565b818160081c166101c085015260101c1691015251163314928315611a55575b505081611a4a575b50613dae565b519061020f604051928284938452830190613456565b905051151584611a2e565b5116331491508580611a26565b346102135760203660031901126102135760043560ff8116810361021357611a886136b5565b600a805460ff60e01b191660e09290921b60ff60e01b16919091179055005b34610213576020366003190112610213576004356001600160401b038116810361021357611ad36136b5565b600a805467ffffffffffffffff60a01b191660a09290921b67ffffffffffffffff60a01b16919091179055005b346102135760003660031901126102135760206001600160401b03600a5460a01c16604051908152f35b346102135760208060031936011261021357600a546040516323b872dd60e01b815233600480830191909152306024830152356044820181905292918290829060649082906000906001600160a01b03165af18015610e1057611d65575b50336000526002815260ff60026040600020015416600014611bc0576002903360005252611bbc60406000209182546137ca565b9055005b60405190916001600160401b0390606083018281118482101761128d5760405282528282016060815260408301936001918286523360005260028252604060002094518555828501905191825192600160401b841161128d5781908354858555808610611d2e575b500191600052806000206000925b848410611c605750505050505050600261088d9251151591019060ff801983541691151516179055565b805190815188811161128d57879181611c848793611c7e8854613339565b88613785565b8294601f8211600114611cc85784958291600092611cbd575b5050600019600383901b1c191690841b1785555b01920193019290611c36565b015190508e80611c9d565b94601f1982169087600052846000209160005b818110611d175750908697848895949310611cfe575b505050811b018555611cb1565b015160001960f88460031b161c191690558e8080611cf1565b8289015184558d978b979401939283019201611cdb565b8460005286868460002092830192015b828110611d4c575050611c28565b9091929350611d5a8161373c565b019086849392611d3e565b611d7b90823d8411610e0957610dfa818361338f565b5082611b88565b34610213576020366003190112610213576004356001600160401b03811161021357611db290369060040161324c565b611dd561088361159a6040518486823760208186810160018152030190206133b0565b604051818382376020818381016001815203019020600d810190815460ff8116600781101561166757600414611ea557611e316004926001600160a01b0390816007820154163314918215611e96575b5081611e875750613dae565b60ff191617905560085491600160401b83101561128d5760018301806008558310156106365761088d9260086000527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30161389c565b60ff9150600901541687611a2e565b81860154163314915088611e25565b606460405162461bcd60e51b815260206004820152602060248201527f546865726520697320616c7265616479206120726973656e20646973707574656044820152fd5b3461021357600036600319011261021357611f026136b5565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b34610213576000366003190112610213576020604051428152f35b34610213576020366003190112610213576001600160a01b03611f7e61330b565b16600052600260205260406000208054611fa2600160ff6002850154169301613e49565b91611fbf6040519384938452606060208501526060840190613456565b90151560408301520390f35b3461021357604036600319011261021357611fe461330b565b6001600160a01b036024359116600052600560205260406000209081548110156102135761201191613321565b612021576101fb61020f916133b0565b634e487b7160e01b600052600060045260246000fd5b346102135761088d600b602061204c366132c1565b9492612073610883610a4560409794975186858237858188810160018152030190206133b0565b826040519384928337810160018152030190206001600160a01b038060078301541633149081156120c3575b50806120b5575b6120af90613dae565b0161395f565b50600981015460ff166120a6565b905060048201541633148661209f565b346102135760a0366003190112610213576004356001600160401b0381116102135761210390369060040161324c565b906024356001600160401b0381116102135761212390369060040161324c565b90926044356001600160401b0381116102135761214490369060040161324c565b906064356001600160401b0381116102135761216490369060040161324c565b9033600052600260205260406000205460095411612c765733600052600260205260016040600020015491600a549260ff8460e01c161115612c21573360005260036020526121bc602c610c07604060002054613339565b6121e8604051878a8237602081898101600181520301902061087d6121e2368a8d61362b565b916133b0565b612be65760843515612b91576122426122106001600160401b0361224e9560a01c16426137ca565b946040519661221e88613373565b612229368a8d61362b565b8852612236368b8e61362b565b6020890152369161362b565b6040860152369161362b565b606083015233608083015260843560a0830152600060c0830152600060e083015261010082015260006101208201526040518060208101106001600160401b0360208301111761128d5760208101604052600081526101408201526060610160820152606061018082015260006101a082015260006101c082015260006101e082015260405182858237602081848101600181520301902081518051906001600160401b03821161128d57819061230f826123098654613339565b86613785565b602090601f8311600114612b2557600092612b1a575b50508160011b916000199060031b1c19161781555b60208201518051906001600160401b03821161128d57819061236c826123636001870154613339565b60018701613785565b602090601f8311600114612aa857600092612a9d575b50508160011b916000199060031b1c19161760018201555b60408201518051906001600160401b03821161128d5781906123cc826123c36002870154613339565b60028701613785565b602090601f8311600114612a2b57600092612a20575b50508160011b916000199060031b1c19161760028201555b60608201518051906001600160401b03821161128d57819061242c826124236003870154613339565b60038701613785565b602090601f83116001146129ae576000926129a3575b50508160011b916000199060031b1c19161760038201555b600481016001600160a01b039081608085015116906bffffffffffffffffffffffff60a01b918282541617905560a0840151600584015560c08401516006840155600783019160e0850151169082541617905561010082015160088201556124d86101208301511515600983019060ff801983541691151516179055565b6101408201518051906001600160401b03821161128d57819061250b82612502600a870154613339565b600a8701613785565b602090601f831160011461293157600092612926575b50508160011b916000199060031b1c191617600a8201555b610160820151805190600160401b821161128d57600b83015482600b8501558083106128f3575b5060200190600b83016000526020600020916000905b8282106128165750505050610180820151805190600160401b821161128d57600c83015482600c8501558083106127e3575b5060200190600c83016000526020600020916000905b8282106127065750505050600d016101a0820151916007831015611667576101e060ff916125ef6126229585613884565b6101c0810151845461ff00191690841660081b61ff00161784550151825462ff00001916911660101b62ff000016179055565b33600052600260205261263d8184600160406000200161395f565b60075490600160401b82101561128d57600182018060075582101561063657836126b2827f580c79f80d4cb0e438a0d03f153c3dd27d464553dcc2fb869879bc42fd524c3b9660409560076000527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880161389c565b3360005260056020526126c982828560002061395f565b81835192839283378101600081520390209382825193849260208452816020850152848401376000828201840152601f01601f19168101030190a2005b80518051906001600160401b03821161128d5761272782611c7e8854613339565b602090601f8311600114612773579282600194936020938695600092612768575b5050600019600383901b1c191690841b1787555b019401910190926125be565b015190508f80612748565b908660005260206000209160005b601f19851681106127cb575083602093600196938796938794601f198116106127b2575b505050811b01875561275c565b015160001960f88460031b161c191690558f80806127a5565b91926020600181928685015181550194019201612781565b600c84016000526020600020908382015b81830181106128045750506125a8565b8061281060019261373c565b016127f4565b80518051906001600160401b03821161128d5761283782611c7e8854613339565b602090601f8311600114612883579282600194936020938695600092612878575b5050600019600383901b1c191690841b1787555b01940191019092612576565b015190508f80612858565b908660005260206000209160005b601f19851681106128db575083602093600196938796938794601f198116106128c2575b505050811b01875561286c565b015160001960f88460031b161c191690558f80806128b5565b91926020600181928685015181550194019201612891565b600b84016000526020600020908382015b8183018110612914575050612560565b8061292060019261373c565b01612904565b015190508880612521565b9250600a84016000526020600020906000935b601f1984168510612988576001945083601f1981161061296f575b505050811b01600a820155612539565b015160001960f88460031b161c1916905588808061295f565b81810151835560209485019460019093019290910190612944565b015190508880612442565b9250600384016000526020600020906000935b601f1984168510612a05576001945083601f198116106129ec575b505050811b01600382015561245a565b015160001960f88460031b161c191690558880806129dc565b818101518355602094850194600190930192909101906129c1565b0151905088806123e2565b9250600284016000526020600020906000935b601f1984168510612a82576001945083601f19811610612a69575b505050811b0160028201556123fa565b015160001960f88460031b161c19169055888080612a59565b81810151835560209485019460019093019290910190612a3e565b015190508880612382565b9250600184016000526020600020906000935b601f1984168510612aff576001945083601f19811610612ae6575b505050811b01600182015561239a565b015160001960f88460031b161c19169055888080612ad6565b81810151835560209485019460019093019290910190612abb565b015190508880612325565b9250836000526020600020906000935b601f1984168510612b76576001945083601f19811610612b5d575b505050811b01815561233a565b015160001960f88460031b161c19169055888080612b50565b81810151835560209485019460019093019290910190612b35565b60405162461bcd60e51b815260206004820152602760248201527f52657365727665207072696365206d7573742062652067726561746572207468604482015266616e207a65726f60c81b6064820152608490fd5b60405162461bcd60e51b81526020600482015260136024820152724974656d20616c72656164792065786973747360681b6044820152606490fd5b60405162461bcd60e51b815260206004820152602760248201527f596f752063616e2774206861766520616e79206d6f7265206163746976652061604482015266756374696f6e7360c81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602d60248201527f4e6f7420656e6f75676820746f6b656e73207374616b656420746f206372656160448201526c3a329030b71030bab1ba34b7b760991b6064820152608490fd5b34610213576020366003190112610213576004356001600160401b03811161021357612d0461088d91369060040161324c565b90336000526003602052604060002061389c565b3461021357602080600319360112610213576004356001600160401b03811161021357612d4990369060040161324c565b90612d6c61088361087260405185858237868187810160018152030190206133b0565b6001600160a01b03600460405184848237858186810160018152030190200154163303612dc9578183600a92612db494604051938492833781016001815203019020016133b0565b9061020f60405192828493845283019061329c565b60405162461bcd60e51b815260048101849052602760248201527f4f6e6c792061756374696f6e206f776e65722063616e2063616c6c2074686973604482015266081b595d1a1bd960ca1b6064820152608490fd5b34610213576040366003190112610213576004356001600160401b03811161021357612e4e90369060040161324c565b906024918235906007821015928361021357818187378186019060018252612e85610883610a45896020809b8197030190206133b0565b826040519384928337810160018152030190209060ff6009830154161561320857600d82019360ff85541693600785101595866131f357600486146131895760048501966001600160a01b039687895416331491828061317a575b9085929184613159575b8415613107575b5083156130ae575b8315613027575b50505015612fe357612f15600a860154613339565b15612f935783612f2491613884565b612f7f5750600314612f3257005b600a5492546006919091015460405163a9059cbb60e01b81529183166001600160a01b031660048301526024820152918391839116816000816044810103925af18015610e105761107957005b634e487b7160e01b60009081526021600452fd5b60405162461bcd60e51b8152600481018990526023818501527f506c656173652073657420612064656c697665727920616464726573732066696044820152621c9cdd60ea1b6064820152608490fd5b60405162461bcd60e51b8152600481018990526018818501527f496e76616c6964207374617465207472616e736974696f6e00000000000000006044820152606490fd5b909192508860078901541633149283613087575b508261304c575b5050828a80612f00565b9091506130725760028114908115613067575b508980613042565b60059150148961305f565b83634e487b7160e01b60005260216004526000fd5b9092506130995760038614918461303b565b84634e487b7160e01b60005260216004526000fd5b9250886007890154163314806130f6575b83816130cd575b5092612ef9565b919250506130995780600285921480156130e8575b836130c6565b5060009250600581146130e2565b5090613099578390600387146130bf565b90935080613148575b838161311f575b50928c612ef1565b9192505061309957806001859214801561313a575b83613117565b506000925060058114613134565b509061309957839060028714613110565b93505060008115801561316d575b93612eea565b5050600060058214613167565b60009550600188149350612ee0565b60405162461bcd60e51b8152600481018990526037818501527f43616e7420726573756d6520657363726f772070726f6365737365732077697460448201527f686f75742064697370757465207265736f6c7574696f6e0000000000000000006064820152608490fd5b82634e487b7160e01b60005260216004526000fd5b60405162461bcd60e51b8152600481018690526019818601527f41756374696f6e20686173206e6f7420656e64656420796574000000000000006044820152606490fd5b9181601f84011215610213578235916001600160401b038311610213576020838186019501011161021357565b60005b83811061328c5750506000910152565b818101518382015260200161327c565b906020916132b581518092818552858086019101613279565b601f01601f1916010190565b6040600319820112610213576001600160401b039160043583811161021357826132ed9160040161324c565b93909392602435918211610213576133079160040161324c565b9091565b600435906001600160a01b038216820361021357565b80548210156106365760005260206000200190600090565b90600182811c92168015613369575b602083101461335357565b634e487b7160e01b600052602260045260246000fd5b91607f1691613348565b61020081019081106001600160401b0382111761128d57604052565b90601f801991011681019081106001600160401b0382111761128d57604052565b90604051918260008254926133c484613339565b90818452600194858116908160001461343357506001146133f0575b50506133ee9250038361338f565b565b9093915060005260209081600020936000915b81831061341b5750506133ee935082010138806133e0565b85548884018501529485019487945091830191613403565b9150506133ee94506020925060ff191682840152151560051b82010138806133e0565b908082519081815260208091019281808460051b8301019501936000915b8483106134845750505050505090565b90919293949584806134a2600193601f198682030187528a5161329c565b9801930193019194939290613474565b9060078210156116675752565b602080820190808352835180925260409283810182858560051b8401019601946000925b8584106134f4575050505050505090565b909192939495968580600192603f198582030187528a51906135ec6135d86135c46135646135516135416135318851610200808a5289019061329c565b898901518882038b8a015261329c565b878d0151878203888f015261329c565b606080880151908783039088015261329c565b6001600160a01b0360808181890151169087015260a0808801519087015260c0808801519087015260e09081880151169086015261010080870151908601526101208087015115159086015261014080870151908683039087015261329c565b610160808601519085830390860152613456565b610180808501519084830390850152613456565b916136006101a080830151908401906134b2565b60ff6101c0818184015116908401526101e080920151169101529901940194019295949391906134e3565b9291926001600160401b03821161128d5760405191613654601f8201601f19166020018461338f565b829481845281830111610213578281602093846000960137010152565b9080601f830112156102135781602061368c9335910161362b565b90565b60206136a8918160405193828580945193849201613279565b8101600181520301902090565b6001600160a01b036000541633036136c957565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b90816020910312610213575180151581036102135790565b818110613730575050565b60008155600101613725565b6137468154613339565b9081613750575050565b81601f60009311600114613762575055565b908083918252613781601f60208420940160051c840160018501613725565b5555565b9190601f811161379457505050565b6133ee926000526020600020906020601f840160051c830193106137c0575b601f0160051c0190613725565b90915081906137b3565b919082018092116137d757565b634e487b7160e01b600052601160045260246000fd5b156137f457565b60405162461bcd60e51b815260206004820152603c60248201527f506c65617365207375626d697420796f7572206574682077616c6c657420707560448201527f626b6579206265666f7265207573696e67207468652073797374656d000000006064820152608490fd5b6020919283604051948593843782019081520301902090565b60078210156116675752565b9060078110156116675760ff80198354169116179055565b9092916001600160401b03811161128d576138c1816138bb8454613339565b84613785565b6000601f82116001146138fb57819293946000926138f0575b50508160011b916000199060031b1c1916179055565b0135905038806138da565b601f198216948382526020918281209281905b8882106139475750508360019596971061392d575b505050811b019055565b0135600019600384901b60f8161c19169055388080613923565b8060018496829495870135815501950192019061390e565b9190918054600160401b81101561128d5761397f91600182018155613321565b929092612021576133ee9261389c565b1561399657565b60405162461bcd60e51b8152602060048201526013602482015272125d195b48191bd95cc81b9bdd08195e1a5cdd606a1b6044820152606490fd5b919082039182116137d757565b60001981146137d75760010190565b90808214613abf576139ff8154613339565b906001600160401b03821161128d578190613a1e826123098654613339565b600090601f8311600114613a5457600092613a495750508160011b916000199060031b1c1916179055565b0154905038806138da565b81526020808220858352818320935090601f1985169083905b828210613aa6575050908460019594939210613a8d57505050811b019055565b015460001960f88460031b161c19169055388080613923565b8495819295850154815560018091019601940190613a6d565b5050565b9160405192828185378284018460019182815260209687910301902091600983019485549660ff8816613d6a5760088501544210613d26576001600160a01b03966004978089880154163314908115613d16575b5015613cac5784809960ff999798991916179055600091338352600282528460408420019383995b613b59575b5050505050505060069192500154156133ee57565b849897969854998a811015613ca257869798999a613b84613b7b36868661362b565b61087d8c6133b0565b613b995750613b92906139de565b9996613b3f565b939495965091505060001991828101908111613c8f57613bbc613bc49187613321565b509186613321565b613c7d5790613bd2916139ed565b83548015613c6a570193613be68585613321565b919091613c58576006979850613bfc8254613339565b9081613c16575b5050505050558291388080808080613b44565b8490601f808411600114613c3657505050509050555b3880808080613c03565b8493958395613c5194528520950160051c8501908501613725565b5555613c2c565b634e487b7160e01b8452838952602484fd5b634e487b7160e01b845260318952602484fd5b634e487b7160e01b8552848a52602485fd5b634e487b7160e01b855260118a52602485fd5b5086979850613b44565b60405162461bcd60e51b8152808901839052603560248201527f4f6e6c79207468652073656c6c6572206f72206869676865737420626964646560448201527f722063616e20656e64207468652061756374696f6e00000000000000000000006064820152608490fd5b9050600787015416331438613b17565b6064906040519062461bcd60e51b82526004820152601960248201527f41756374696f6e20686173206e6f742079657420656e646564000000000000006044820152fd5b6064906040519062461bcd60e51b82526004820152601960248201527f41756374696f6e2068617320616c726561647920656e646564000000000000006044820152fd5b15613db557565b60405162461bcd60e51b815260206004820152604960248201527f41756374696f6e20686173206e6f7420656e646564207965742c206f7220796f60448201527f7520617265206e6f74207468652077696e6e6572206f72206f776e6572206f6660648201526820746865206974656d60b81b608482015260a490fd5b6001600160401b03811161128d5760051b60200190565b908154613e5581613e32565b92613e63604051948561338f565b818452600090815260208082208186015b848410613e82575050505050565b6001838192613e90856133b0565b815201920193019290613e74565b90613ea882613e32565b604090613eb78251918261338f565b8381528093613ec8601f1991613e32565b019160005b838110613eda5750505050565b6020908251613ee881613373565b6060808252839080828401528086840152808084015260006080840152600060a0840152600060c0840152600060e084015260006101008401526000610120840152806101408401528061016084015261018083015260006101a083015260006101c083015260006101e0830152828601015201613ecd565b80518210156106365760209160051b010190565b60405190816000825492613f8884613339565b906001948581169081600014613fe95750600114613faf575b505060209281520301902090565b60009081526020808220959350905b828110613fd5575050602093508201909238613fa1565b855487820152948301948694508101613fbe565b60ff1916855250508015150282019050602038613fa1565b1561400857565b60405162461bcd60e51b815260206004820152602a60248201527f596f7520617265206e6f7420616e20617574686f72697a656420636f6d6d69746044820152693a32b29036b2b6b132b960b11b6064820152608490fd5b1561406757565b60405162461bcd60e51b815260206004820152602360248201527f546869732061756374696f6e20646f65736e277420686176652061206469737060448201526275746560e81b6064820152608490fd5b60ff1660ff81146137d75760010190565b90604051916020926140f78482816140ea8183019687815193849201613279565b810103808452018261338f565b519020916141176040519182816140ea8183019687815193849201613279565b519020149056fea2646970667358221220301265fe53e49b55aeb6dc03ca2e3df38fc4948a2b0f2ca112ac66bb5c53a15164736f6c63430008130033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c908163016544aa14612e1e5750806305f3b3f714612d1857806307412e9c14612cd15780631f49c291146120d35780633098662e146120375780634129027314611fcb578063676202fe14611f5d5780636c9230db14611f42578063715018a614611ee9578063725a3b4b14611d825780637547c7a314611b2a57806378cb51af14611b005780637c812b3914611aa75780637f38d86514611a6257806383c27150146118a757806388624ab3146118835780638aaf2761146118625780638da5cb5b1461183b5780638f2238ba1461167d5780639211735b14611537578063955ab3371461143b5780639d6271a01461132e5780639f19360d14611116578063a4bdc06e14610fab578063a7eaa24114610b85578063bed34bba14610b2b578063c1d733db14610a0f578063cbd2bdfd1461088f578063ce2ba9bf14610820578063d1b8b4bf146101c1578063d31f371e146106a9578063d8bcd0c91461068b578063e636d84b1461064c578063ee54507b146104b5578063f1d273c314610329578063f2fde38b14610260578063fb346ea0146102185763fce9512a146101c157600080fd5b34610213576020366003190112610213576001600160a01b036101e261330b565b16600052600360205261020f6101fb60406000206133b0565b60405191829160208352602083019061329c565b0390f35b600080fd5b34610213576020366003190112610213576001600160a01b0361023961330b565b16600052600260205260408060002060ff6002825492015416825191825215156020820152f35b346102135760203660031901126102135761027961330b565b6102816136b5565b6001600160a01b038091169081156102d557600054826bffffffffffffffffffffffff60a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b3461021357602080600319360112610213576001600160a01b03908161034d61330b565b166000526006908181526103646040600020613e49565b9161036f8351613e9e565b9360005b84518110156104a7578061039361038d6104a29388613f61565b5161368f565b600d604051916103a283613373565b6103ab816133b0565b83526103b9600182016133b0565b888401526103c9600282016133b0565b60408401526103da600382016133b0565b6060840152856004820154166080840152600581015460a08401528681015460c08401528560078201541660e08401526008908181015461010085015260ff928184600981940154161515610120870152610437600a82016133b0565b610140870152610449600b8201613e49565b61016087015261045b600c8201613e49565b610180870152015480926104758383166101a08801613878565b1c166101c084015260101c166101e08201526104918289613f61565b5261049c8188613f61565b506139de565b610373565b6040518061020f88826134bf565b346102135760003660031901126102135760088054906104d482613e9e565b916000916007918254935b8481106104f4576040518061020f88826134bf565b8181101561063657610631908360005261052f817ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee301613f75565b6040519061053c82613373565b610545816133b0565b8252610553600182016133b0565b6020830152610564600282016133b0565b6040830152610575600382016133b0565b60608301526001600160a01b03806004830154166080840152600582015460a0840152600682015460c0840152878201541660e083015285810154610100830152600d60ff918260098201541615156101208501526105d6600a82016133b0565b6101408501526105e8600b8201613e49565b6101608501526105fa600c8201613e49565b61018085015201546106128282166101a08501613878565b8181881c166101c084015260101c166101e08201526104918289613f61565b6104df565b634e487b7160e01b600052603260045260246000fd5b34610213576020366003190112610213576001600160a01b0361066d61330b565b166000526004602052602060ff604060002054166040519015158152f35b34610213576000366003190112610213576020600954604051908152f35b34610213576020366003190112610213576004356001600160401b038111610213576106d9903690600401613671565b60405181818093516020819301916106f092613279565b810160018152036020019020610705816133b0565b610711600183016133b0565b9161071e600282016133b0565b9061072b600382016133b0565b6001600160a01b0390816004840154169160058401549060068501549060078601541690600886015492600987015460ff1694600a880161076b906133b0565b97600d0154986040519b8c9b8c6101c08091528d016107899161329c565b8c810360208e015261079a9161329c565b8b810360408d01526107ab9161329c565b8a810360608c01526107bc9161329c565b9560808a015260a089015260c088015260e087015261010086015215156101208501528381036101408501526107f19161329c565b90610803610160840160ff83166134b2565b8060081c60ff1661018084015260101c60ff166101a08301520390f35b6020366003190112610213576004356001600160401b0381116102135761084e61088d91369060040161324c565b906108886108836108726040518585823760208187810160018152030190206133b0565b61087d36868661362b565b906140c9565b61398f565b613ac3565b005b3461021357600036600319011261021357600780546108ad81613e9e565b9160005b8281106108c6576040518061020f86826134bf565b610a0a90826000526108f9817fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801613f75565b600d6040519161090883613373565b610911816133b0565b835261091f600182016133b0565b6020840152610930600282016133b0565b6040840152610941600382016133b0565b60608401526001600160a01b03806004830154166080850152600582015460a0850152600682015460c0850152868201541660e08401526008908181015461010085015260ff9281846009819401541615156101208701526109a5600a82016133b0565b6101408701526109b7600b8201613e49565b6101608701526109c9600c8201613e49565b610180870152015480926109e38383166101a08801613878565b1c166101c084015260101c166101e08201526109ff8287613f61565b5261049c8186613f61565b6108b1565b34610213576020610a1f366132c1565b92610a50610883610a4560409794975186858237858188810160018152030190206133b0565b61087d36878661362b565b826040519384928337810160018152030190209160ff60098401541680610ae3575b15610a8357600c61088d930161395f565b60405162461bcd60e51b815260206004820152603260248201527f596f7520646f206e6f7420686176652070726976696c6567657320746f206368604482015271617420696e2074686973206469737075746560701b6064820152608490fd5b5033600052600460205260ff6040600020541680610a7257506001600160a01b03338160078601541614908115610b1b575b50610a72565b9050600484015416331484610b15565b34610213576040366003190112610213576001600160401b0360043581811161021357610b5c903690600401613671565b906024359081116102135760209161087d610b7b923690600401613671565b6040519015158152f35b6040366003190112610213576004356001600160401b03811161021357610bb090369060040161324c565b90602490813592604051928183853781840194610bec610883610be1876001998a81526020998a91030190206133b0565b61087d36878961362b565b3360005260038552610c0d602c610c07604060002054613339565b146137ed565b60405183858237858185810189815203019020906001600160a01b0390338260048501541614610f5d578060058401541015610f075760ff600984015416610ecf5760088301928354421015610e955760068101908154831115610e3957600a546040516323b872dd60e01b81523360048201523060248201526044810185905291908a90839060649082906000908a165af1918215610e1057600792610e1c575b500192888185541680610d9a575b5050505580546001600160a01b031916331790555490601e610cdf42846139d1565b1115610d47575b5050336000526006835260ff610d0385604060002001838561385f565b541615610d0c57005b6006610d3a9333600052818152610d288385604060002061395f565b3360005252836040600020019161385f565b805460ff19169091179055005b610d5142836139d1565b601e0390601e8211610d86575090610d68916137ca565b60086040518385823785818581018981520301902001558480610ce6565b634e487b7160e01b60009081526011600452fd5b600a54845460405163a9059cbb60e01b81526001600160a01b039390931660048401526024830152909283916044918391600091165af18015610e1057610de3575b8881610cbd565b610e0290893d8b11610e09575b610dfa818361338f565b81019061370d565b5089610ddc565b503d610df0565b6040513d6000823e3d90fd5b610e32908b3d8d11610e0957610dfa818361338f565b508b610caf565b60405162461bcd60e51b8152600481018a9052602f818801527f426964206d75737420626520686967686572207468616e20746865206375727260448201526e195b9d081a1a59da195cdd08189a59608a1b6064820152608490fd5b60405162461bcd60e51b81526004810189905260138187015272105d58dd1a5bdb881a185cc8195e1c1a5c9959606a1b6044820152606490fd5b60405162461bcd60e51b81526004810188905260118186015270105d58dd1a5bdb881a185cc8195b991959607a1b6044820152606490fd5b60405162461bcd60e51b8152600481018890526029818601527f426964206d75737420626520686967686572207468616e20746865207265736560448201526872766520707269636560b81b6064820152608490fd5b60405162461bcd60e51b8152600481018890526021818601527f4f776e65722063616e277420626964206f6e2074686569722061756374696f6e6044820152607360f81b6064820152608490fd5b3461021357600036600319011261021357336000526020600281526001604060002001546110ac576001600160a01b0360008282600a54163383526002825260446040842054604051948593849263095ea7b360e01b845230600485015260248401525af18015610e105760009284926110699261108f575b50600a54338086526002855260408087205490516323b872dd60e01b815230600482015260248101929092526044820152948593929091169183919082906064820190565b03925af18015610e105761107957005b8161088d92903d10610e0957610dfa818361338f565b6110a590843d8611610e0957610dfa818361338f565b5085611024565b6084906040519062461bcd60e51b82526004820152603660248201527f596f752063616e27742072656465656d20746f6b656e73207768696c65206f6e60448201527f676f696e672061756374696f6e732070657273697374000000000000000000006064820152fd5b34610213576040366003190112610213576001600160401b036004358181116102135761114790369060040161324c565b9160243581811161021357611160903690600401613671565b9260405190808483378082019361118b610883610872856001988981526020978891030190206133b0565b6001600160a01b0360076040518484823785818681018a81520301902001541633148061130e575b156112a3579082600a928260405193849283378101878152030190200193805192831161128d576111ee836111e88754613339565b87613785565b81601f841160011461122a575092829391839260009461121f575b50501b916000199060031b1c1916179055600080f35b015192508580611209565b919083601f1981168760005284600020946000905b88838310611273575050501061125a575b505050811b019055005b015160001960f88460031b161c19169055838080611250565b85870151885590960195948501948793509081019061123f565b634e487b7160e01b600052604160045260246000fd5b60405162461bcd60e51b815260048101849052603460248201527f596f7520686176656e277420776f6e207468652061756374696f6e206f72206960448201527f7473207374696c6c20696e2070726f67726573730000000000000000000000006064820152608490fd5b5060ff60096040518484823785818681018a8152030190200154166111b3565b3461021357602080600319360112610213576001600160a01b03908161135261330b565b166000526005908181526113696040600020613e49565b916113748351613e9e565b9360005b84518110156104a7578061139261038d6114369388613f61565b600d604051916113a183613373565b6113aa816133b0565b83526113b8600182016133b0565b888401526113c8600282016133b0565b60408401526113d9600382016133b0565b60608401528560048201541660808401528681015460a0840152600681015460c08401528560078201541660e08401526008908181015461010085015260ff928184600981940154161515610120870152610437600a82016133b0565b611378565b34610213576020366003190112610213576004356001600160401b03811161021357602061147061150492369060040161324c565b9190611494610883610a4560405186858237858188810160018152030190206133b0565b826040519384928337810160018152030190206001600160a01b03806004830154169060058301549060068401549060078501541660088501549160ff600987015416936115126114f060016114e98a6133b0565b99016133b0565b604051998a99610100808c528b019061329c565b9089820360208b015261329c565b9560408801526060870152608086015260a085015260c0840152151560e08301520390f35b34610213576040366003190112610213576004356001600160401b0381116102135761156790369060040161324c565b906024359160ff8316809303610213576115a561088361159a6040518486823760208186810160018152030190206133b0565b61087d36858761362b565b3360005260046020526115bf60ff60406000205416614001565b60ff600d6040518385823760208185810160018152030190200154166007811015611667576001926115f5600460209314614060565b826040519384928337810184815203019020910361163957600d61088d910161162460ff825460081c166140b8565b61ff0082549160081b169061ff001916179055565b600d61088d910161165060ff825460101c166140b8565b62ff000082549160101b169062ff00001916179055565b634e487b7160e01b600052602160045260246000fd5b602080600319360112610213576004356001600160401b038111610213576116a990369060040161324c565b906116cc61088361087260405185858237868187810160018152030190206133b0565b60ff600d6040518484823785818681016001815203019020015416906007821015611667576116fe6004859314614060565b336000526004825261171760ff60406000205416614001565b8260405193849283378101600181520301902090600d82019181835460ff808260101c169160081c1610156000146117c257600a5460048381015460069094015460405163a9059cbb60e01b81526001600160a01b039586169281019290925260248201529283916044918391600091165af18015610e10576117a4575b5050805460ff19166005179055005b816117ba92903d10610e0957610dfa818361338f565b508180611795565b600a54600783015460069093015460405163a9059cbb60e01b81526001600160a01b03948516600482015260248101919091529283916044918391600091165af18015610e105761181d575b5050805460ff19166006179055005b8161183392903d10610e0957610dfa818361338f565b50818061180e565b346102135760003660031901126102135760206001600160a01b0360005416604051908152f35b346102135760203660031901126102135761187b6136b5565b600435600955005b3461021357600036600319011261021357602060ff600a5460e01c16604051908152f35b3461021357602080600319360112610213576004356001600160401b038111610213576118d98291369060040161324c565b91906118fd610883610a4560405186858237858188810160018152030190206133b0565b82604051938492833781016001815203019020611a3460405161191f81613373565b611928836133b0565b8152611936600184016133b0565b84820152611946600284016133b0565b6040820152611957600384016133b0565b60608201526001600160a01b0390816004850154169160808201928352600585015460a0830152600685015460c0830152808060078701541660e08401908152600887015461010085015260ff60098801541693610120810194151585526119c1600a89016133b0565b6101408201526101e060ff600d6119da600b8c01613e49565b9a61016085019b8c526119ef600c8201613e49565b6101808601520154611a078282166101a08601613878565b818160081c166101c085015260101c1691015251163314928315611a55575b505081611a4a575b50613dae565b519061020f604051928284938452830190613456565b905051151584611a2e565b5116331491508580611a26565b346102135760203660031901126102135760043560ff8116810361021357611a886136b5565b600a805460ff60e01b191660e09290921b60ff60e01b16919091179055005b34610213576020366003190112610213576004356001600160401b038116810361021357611ad36136b5565b600a805467ffffffffffffffff60a01b191660a09290921b67ffffffffffffffff60a01b16919091179055005b346102135760003660031901126102135760206001600160401b03600a5460a01c16604051908152f35b346102135760208060031936011261021357600a546040516323b872dd60e01b815233600480830191909152306024830152356044820181905292918290829060649082906000906001600160a01b03165af18015610e1057611d65575b50336000526002815260ff60026040600020015416600014611bc0576002903360005252611bbc60406000209182546137ca565b9055005b60405190916001600160401b0390606083018281118482101761128d5760405282528282016060815260408301936001918286523360005260028252604060002094518555828501905191825192600160401b841161128d5781908354858555808610611d2e575b500191600052806000206000925b848410611c605750505050505050600261088d9251151591019060ff801983541691151516179055565b805190815188811161128d57879181611c848793611c7e8854613339565b88613785565b8294601f8211600114611cc85784958291600092611cbd575b5050600019600383901b1c191690841b1785555b01920193019290611c36565b015190508e80611c9d565b94601f1982169087600052846000209160005b818110611d175750908697848895949310611cfe575b505050811b018555611cb1565b015160001960f88460031b161c191690558e8080611cf1565b8289015184558d978b979401939283019201611cdb565b8460005286868460002092830192015b828110611d4c575050611c28565b9091929350611d5a8161373c565b019086849392611d3e565b611d7b90823d8411610e0957610dfa818361338f565b5082611b88565b34610213576020366003190112610213576004356001600160401b03811161021357611db290369060040161324c565b611dd561088361159a6040518486823760208186810160018152030190206133b0565b604051818382376020818381016001815203019020600d810190815460ff8116600781101561166757600414611ea557611e316004926001600160a01b0390816007820154163314918215611e96575b5081611e875750613dae565b60ff191617905560085491600160401b83101561128d5760018301806008558310156106365761088d9260086000527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30161389c565b60ff9150600901541687611a2e565b81860154163314915088611e25565b606460405162461bcd60e51b815260206004820152602060248201527f546865726520697320616c7265616479206120726973656e20646973707574656044820152fd5b3461021357600036600319011261021357611f026136b5565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b34610213576000366003190112610213576020604051428152f35b34610213576020366003190112610213576001600160a01b03611f7e61330b565b16600052600260205260406000208054611fa2600160ff6002850154169301613e49565b91611fbf6040519384938452606060208501526060840190613456565b90151560408301520390f35b3461021357604036600319011261021357611fe461330b565b6001600160a01b036024359116600052600560205260406000209081548110156102135761201191613321565b612021576101fb61020f916133b0565b634e487b7160e01b600052600060045260246000fd5b346102135761088d600b602061204c366132c1565b9492612073610883610a4560409794975186858237858188810160018152030190206133b0565b826040519384928337810160018152030190206001600160a01b038060078301541633149081156120c3575b50806120b5575b6120af90613dae565b0161395f565b50600981015460ff166120a6565b905060048201541633148661209f565b346102135760a0366003190112610213576004356001600160401b0381116102135761210390369060040161324c565b906024356001600160401b0381116102135761212390369060040161324c565b90926044356001600160401b0381116102135761214490369060040161324c565b906064356001600160401b0381116102135761216490369060040161324c565b9033600052600260205260406000205460095411612c765733600052600260205260016040600020015491600a549260ff8460e01c161115612c21573360005260036020526121bc602c610c07604060002054613339565b6121e8604051878a8237602081898101600181520301902061087d6121e2368a8d61362b565b916133b0565b612be65760843515612b91576122426122106001600160401b0361224e9560a01c16426137ca565b946040519661221e88613373565b612229368a8d61362b565b8852612236368b8e61362b565b6020890152369161362b565b6040860152369161362b565b606083015233608083015260843560a0830152600060c0830152600060e083015261010082015260006101208201526040518060208101106001600160401b0360208301111761128d5760208101604052600081526101408201526060610160820152606061018082015260006101a082015260006101c082015260006101e082015260405182858237602081848101600181520301902081518051906001600160401b03821161128d57819061230f826123098654613339565b86613785565b602090601f8311600114612b2557600092612b1a575b50508160011b916000199060031b1c19161781555b60208201518051906001600160401b03821161128d57819061236c826123636001870154613339565b60018701613785565b602090601f8311600114612aa857600092612a9d575b50508160011b916000199060031b1c19161760018201555b60408201518051906001600160401b03821161128d5781906123cc826123c36002870154613339565b60028701613785565b602090601f8311600114612a2b57600092612a20575b50508160011b916000199060031b1c19161760028201555b60608201518051906001600160401b03821161128d57819061242c826124236003870154613339565b60038701613785565b602090601f83116001146129ae576000926129a3575b50508160011b916000199060031b1c19161760038201555b600481016001600160a01b039081608085015116906bffffffffffffffffffffffff60a01b918282541617905560a0840151600584015560c08401516006840155600783019160e0850151169082541617905561010082015160088201556124d86101208301511515600983019060ff801983541691151516179055565b6101408201518051906001600160401b03821161128d57819061250b82612502600a870154613339565b600a8701613785565b602090601f831160011461293157600092612926575b50508160011b916000199060031b1c191617600a8201555b610160820151805190600160401b821161128d57600b83015482600b8501558083106128f3575b5060200190600b83016000526020600020916000905b8282106128165750505050610180820151805190600160401b821161128d57600c83015482600c8501558083106127e3575b5060200190600c83016000526020600020916000905b8282106127065750505050600d016101a0820151916007831015611667576101e060ff916125ef6126229585613884565b6101c0810151845461ff00191690841660081b61ff00161784550151825462ff00001916911660101b62ff000016179055565b33600052600260205261263d8184600160406000200161395f565b60075490600160401b82101561128d57600182018060075582101561063657836126b2827f580c79f80d4cb0e438a0d03f153c3dd27d464553dcc2fb869879bc42fd524c3b9660409560076000527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880161389c565b3360005260056020526126c982828560002061395f565b81835192839283378101600081520390209382825193849260208452816020850152848401376000828201840152601f01601f19168101030190a2005b80518051906001600160401b03821161128d5761272782611c7e8854613339565b602090601f8311600114612773579282600194936020938695600092612768575b5050600019600383901b1c191690841b1787555b019401910190926125be565b015190508f80612748565b908660005260206000209160005b601f19851681106127cb575083602093600196938796938794601f198116106127b2575b505050811b01875561275c565b015160001960f88460031b161c191690558f80806127a5565b91926020600181928685015181550194019201612781565b600c84016000526020600020908382015b81830181106128045750506125a8565b8061281060019261373c565b016127f4565b80518051906001600160401b03821161128d5761283782611c7e8854613339565b602090601f8311600114612883579282600194936020938695600092612878575b5050600019600383901b1c191690841b1787555b01940191019092612576565b015190508f80612858565b908660005260206000209160005b601f19851681106128db575083602093600196938796938794601f198116106128c2575b505050811b01875561286c565b015160001960f88460031b161c191690558f80806128b5565b91926020600181928685015181550194019201612891565b600b84016000526020600020908382015b8183018110612914575050612560565b8061292060019261373c565b01612904565b015190508880612521565b9250600a84016000526020600020906000935b601f1984168510612988576001945083601f1981161061296f575b505050811b01600a820155612539565b015160001960f88460031b161c1916905588808061295f565b81810151835560209485019460019093019290910190612944565b015190508880612442565b9250600384016000526020600020906000935b601f1984168510612a05576001945083601f198116106129ec575b505050811b01600382015561245a565b015160001960f88460031b161c191690558880806129dc565b818101518355602094850194600190930192909101906129c1565b0151905088806123e2565b9250600284016000526020600020906000935b601f1984168510612a82576001945083601f19811610612a69575b505050811b0160028201556123fa565b015160001960f88460031b161c19169055888080612a59565b81810151835560209485019460019093019290910190612a3e565b015190508880612382565b9250600184016000526020600020906000935b601f1984168510612aff576001945083601f19811610612ae6575b505050811b01600182015561239a565b015160001960f88460031b161c19169055888080612ad6565b81810151835560209485019460019093019290910190612abb565b015190508880612325565b9250836000526020600020906000935b601f1984168510612b76576001945083601f19811610612b5d575b505050811b01815561233a565b015160001960f88460031b161c19169055888080612b50565b81810151835560209485019460019093019290910190612b35565b60405162461bcd60e51b815260206004820152602760248201527f52657365727665207072696365206d7573742062652067726561746572207468604482015266616e207a65726f60c81b6064820152608490fd5b60405162461bcd60e51b81526020600482015260136024820152724974656d20616c72656164792065786973747360681b6044820152606490fd5b60405162461bcd60e51b815260206004820152602760248201527f596f752063616e2774206861766520616e79206d6f7265206163746976652061604482015266756374696f6e7360c81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602d60248201527f4e6f7420656e6f75676820746f6b656e73207374616b656420746f206372656160448201526c3a329030b71030bab1ba34b7b760991b6064820152608490fd5b34610213576020366003190112610213576004356001600160401b03811161021357612d0461088d91369060040161324c565b90336000526003602052604060002061389c565b3461021357602080600319360112610213576004356001600160401b03811161021357612d4990369060040161324c565b90612d6c61088361087260405185858237868187810160018152030190206133b0565b6001600160a01b03600460405184848237858186810160018152030190200154163303612dc9578183600a92612db494604051938492833781016001815203019020016133b0565b9061020f60405192828493845283019061329c565b60405162461bcd60e51b815260048101849052602760248201527f4f6e6c792061756374696f6e206f776e65722063616e2063616c6c2074686973604482015266081b595d1a1bd960ca1b6064820152608490fd5b34610213576040366003190112610213576004356001600160401b03811161021357612e4e90369060040161324c565b906024918235906007821015928361021357818187378186019060018252612e85610883610a45896020809b8197030190206133b0565b826040519384928337810160018152030190209060ff6009830154161561320857600d82019360ff85541693600785101595866131f357600486146131895760048501966001600160a01b039687895416331491828061317a575b9085929184613159575b8415613107575b5083156130ae575b8315613027575b50505015612fe357612f15600a860154613339565b15612f935783612f2491613884565b612f7f5750600314612f3257005b600a5492546006919091015460405163a9059cbb60e01b81529183166001600160a01b031660048301526024820152918391839116816000816044810103925af18015610e105761107957005b634e487b7160e01b60009081526021600452fd5b60405162461bcd60e51b8152600481018990526023818501527f506c656173652073657420612064656c697665727920616464726573732066696044820152621c9cdd60ea1b6064820152608490fd5b60405162461bcd60e51b8152600481018990526018818501527f496e76616c6964207374617465207472616e736974696f6e00000000000000006044820152606490fd5b909192508860078901541633149283613087575b508261304c575b5050828a80612f00565b9091506130725760028114908115613067575b508980613042565b60059150148961305f565b83634e487b7160e01b60005260216004526000fd5b9092506130995760038614918461303b565b84634e487b7160e01b60005260216004526000fd5b9250886007890154163314806130f6575b83816130cd575b5092612ef9565b919250506130995780600285921480156130e8575b836130c6565b5060009250600581146130e2565b5090613099578390600387146130bf565b90935080613148575b838161311f575b50928c612ef1565b9192505061309957806001859214801561313a575b83613117565b506000925060058114613134565b509061309957839060028714613110565b93505060008115801561316d575b93612eea565b5050600060058214613167565b60009550600188149350612ee0565b60405162461bcd60e51b8152600481018990526037818501527f43616e7420726573756d6520657363726f772070726f6365737365732077697460448201527f686f75742064697370757465207265736f6c7574696f6e0000000000000000006064820152608490fd5b82634e487b7160e01b60005260216004526000fd5b60405162461bcd60e51b8152600481018690526019818601527f41756374696f6e20686173206e6f7420656e64656420796574000000000000006044820152606490fd5b9181601f84011215610213578235916001600160401b038311610213576020838186019501011161021357565b60005b83811061328c5750506000910152565b818101518382015260200161327c565b906020916132b581518092818552858086019101613279565b601f01601f1916010190565b6040600319820112610213576001600160401b039160043583811161021357826132ed9160040161324c565b93909392602435918211610213576133079160040161324c565b9091565b600435906001600160a01b038216820361021357565b80548210156106365760005260206000200190600090565b90600182811c92168015613369575b602083101461335357565b634e487b7160e01b600052602260045260246000fd5b91607f1691613348565b61020081019081106001600160401b0382111761128d57604052565b90601f801991011681019081106001600160401b0382111761128d57604052565b90604051918260008254926133c484613339565b90818452600194858116908160001461343357506001146133f0575b50506133ee9250038361338f565b565b9093915060005260209081600020936000915b81831061341b5750506133ee935082010138806133e0565b85548884018501529485019487945091830191613403565b9150506133ee94506020925060ff191682840152151560051b82010138806133e0565b908082519081815260208091019281808460051b8301019501936000915b8483106134845750505050505090565b90919293949584806134a2600193601f198682030187528a5161329c565b9801930193019194939290613474565b9060078210156116675752565b602080820190808352835180925260409283810182858560051b8401019601946000925b8584106134f4575050505050505090565b909192939495968580600192603f198582030187528a51906135ec6135d86135c46135646135516135416135318851610200808a5289019061329c565b898901518882038b8a015261329c565b878d0151878203888f015261329c565b606080880151908783039088015261329c565b6001600160a01b0360808181890151169087015260a0808801519087015260c0808801519087015260e09081880151169086015261010080870151908601526101208087015115159086015261014080870151908683039087015261329c565b610160808601519085830390860152613456565b610180808501519084830390850152613456565b916136006101a080830151908401906134b2565b60ff6101c0818184015116908401526101e080920151169101529901940194019295949391906134e3565b9291926001600160401b03821161128d5760405191613654601f8201601f19166020018461338f565b829481845281830111610213578281602093846000960137010152565b9080601f830112156102135781602061368c9335910161362b565b90565b60206136a8918160405193828580945193849201613279565b8101600181520301902090565b6001600160a01b036000541633036136c957565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b90816020910312610213575180151581036102135790565b818110613730575050565b60008155600101613725565b6137468154613339565b9081613750575050565b81601f60009311600114613762575055565b908083918252613781601f60208420940160051c840160018501613725565b5555565b9190601f811161379457505050565b6133ee926000526020600020906020601f840160051c830193106137c0575b601f0160051c0190613725565b90915081906137b3565b919082018092116137d757565b634e487b7160e01b600052601160045260246000fd5b156137f457565b60405162461bcd60e51b815260206004820152603c60248201527f506c65617365207375626d697420796f7572206574682077616c6c657420707560448201527f626b6579206265666f7265207573696e67207468652073797374656d000000006064820152608490fd5b6020919283604051948593843782019081520301902090565b60078210156116675752565b9060078110156116675760ff80198354169116179055565b9092916001600160401b03811161128d576138c1816138bb8454613339565b84613785565b6000601f82116001146138fb57819293946000926138f0575b50508160011b916000199060031b1c1916179055565b0135905038806138da565b601f198216948382526020918281209281905b8882106139475750508360019596971061392d575b505050811b019055565b0135600019600384901b60f8161c19169055388080613923565b8060018496829495870135815501950192019061390e565b9190918054600160401b81101561128d5761397f91600182018155613321565b929092612021576133ee9261389c565b1561399657565b60405162461bcd60e51b8152602060048201526013602482015272125d195b48191bd95cc81b9bdd08195e1a5cdd606a1b6044820152606490fd5b919082039182116137d757565b60001981146137d75760010190565b90808214613abf576139ff8154613339565b906001600160401b03821161128d578190613a1e826123098654613339565b600090601f8311600114613a5457600092613a495750508160011b916000199060031b1c1916179055565b0154905038806138da565b81526020808220858352818320935090601f1985169083905b828210613aa6575050908460019594939210613a8d57505050811b019055565b015460001960f88460031b161c19169055388080613923565b8495819295850154815560018091019601940190613a6d565b5050565b9160405192828185378284018460019182815260209687910301902091600983019485549660ff8816613d6a5760088501544210613d26576001600160a01b03966004978089880154163314908115613d16575b5015613cac5784809960ff999798991916179055600091338352600282528460408420019383995b613b59575b5050505050505060069192500154156133ee57565b849897969854998a811015613ca257869798999a613b84613b7b36868661362b565b61087d8c6133b0565b613b995750613b92906139de565b9996613b3f565b939495965091505060001991828101908111613c8f57613bbc613bc49187613321565b509186613321565b613c7d5790613bd2916139ed565b83548015613c6a570193613be68585613321565b919091613c58576006979850613bfc8254613339565b9081613c16575b5050505050558291388080808080613b44565b8490601f808411600114613c3657505050509050555b3880808080613c03565b8493958395613c5194528520950160051c8501908501613725565b5555613c2c565b634e487b7160e01b8452838952602484fd5b634e487b7160e01b845260318952602484fd5b634e487b7160e01b8552848a52602485fd5b634e487b7160e01b855260118a52602485fd5b5086979850613b44565b60405162461bcd60e51b8152808901839052603560248201527f4f6e6c79207468652073656c6c6572206f72206869676865737420626964646560448201527f722063616e20656e64207468652061756374696f6e00000000000000000000006064820152608490fd5b9050600787015416331438613b17565b6064906040519062461bcd60e51b82526004820152601960248201527f41756374696f6e20686173206e6f742079657420656e646564000000000000006044820152fd5b6064906040519062461bcd60e51b82526004820152601960248201527f41756374696f6e2068617320616c726561647920656e646564000000000000006044820152fd5b15613db557565b60405162461bcd60e51b815260206004820152604960248201527f41756374696f6e20686173206e6f7420656e646564207965742c206f7220796f60448201527f7520617265206e6f74207468652077696e6e6572206f72206f776e6572206f6660648201526820746865206974656d60b81b608482015260a490fd5b6001600160401b03811161128d5760051b60200190565b908154613e5581613e32565b92613e63604051948561338f565b818452600090815260208082208186015b848410613e82575050505050565b6001838192613e90856133b0565b815201920193019290613e74565b90613ea882613e32565b604090613eb78251918261338f565b8381528093613ec8601f1991613e32565b019160005b838110613eda5750505050565b6020908251613ee881613373565b6060808252839080828401528086840152808084015260006080840152600060a0840152600060c0840152600060e084015260006101008401526000610120840152806101408401528061016084015261018083015260006101a083015260006101c083015260006101e0830152828601015201613ecd565b80518210156106365760209160051b010190565b60405190816000825492613f8884613339565b906001948581169081600014613fe95750600114613faf575b505060209281520301902090565b60009081526020808220959350905b828110613fd5575050602093508201909238613fa1565b855487820152948301948694508101613fbe565b60ff1916855250508015150282019050602038613fa1565b1561400857565b60405162461bcd60e51b815260206004820152602a60248201527f596f7520617265206e6f7420616e20617574686f72697a656420636f6d6d69746044820152693a32b29036b2b6b132b960b11b6064820152608490fd5b1561406757565b60405162461bcd60e51b815260206004820152602360248201527f546869732061756374696f6e20646f65736e277420686176652061206469737060448201526275746560e81b6064820152608490fd5b60ff1660ff81146137d75760010190565b90604051916020926140f78482816140ea8183019687815193849201613279565b810103808452018261338f565b519020916141176040519182816140ea8183019687815193849201613279565b519020149056fea2646970667358221220301265fe53e49b55aeb6dc03ca2e3df38fc4948a2b0f2ca112ac66bb5c53a15164736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Auction.sol:Auction",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5675,
        "contract": "contracts/Auction.sol:Auction",
        "label": "auctionItems",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_string_memory_ptr,t_struct(AuctionItem)5654_storage)"
      },
      {
        "astId": 5680,
        "contract": "contracts/Auction.sol:Auction",
        "label": "activeAuctionOwners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(ActiveAuctioneer)5662_storage)"
      },
      {
        "astId": 5684,
        "contract": "contracts/Auction.sol:Auction",
        "label": "pubKeys",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 5688,
        "contract": "contracts/Auction.sol:Auction",
        "label": "isCommitteeMember",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5693,
        "contract": "contracts/Auction.sol:Auction",
        "label": "ownerAuctions",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_array(t_string_storage)dyn_storage)"
      },
      {
        "astId": 5698,
        "contract": "contracts/Auction.sol:Auction",
        "label": "userBidsMapping",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(UserBids)5670_storage)"
      },
      {
        "astId": 5701,
        "contract": "contracts/Auction.sol:Auction",
        "label": "auctionArr",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 5704,
        "contract": "contracts/Auction.sol:Auction",
        "label": "disputeArr",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 5712,
        "contract": "contracts/Auction.sol:Auction",
        "label": "tokensToStake",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 5715,
        "contract": "contracts/Auction.sol:Auction",
        "label": "token",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(ObscurityToken)7375"
      },
      {
        "astId": 5720,
        "contract": "contracts/Auction.sol:Auction",
        "label": "auctionDuration",
        "offset": 20,
        "slot": "10",
        "type": "t_uint64"
      },
      {
        "astId": 5723,
        "contract": "contracts/Auction.sol:Auction",
        "label": "concurrentAuctionsPerUser",
        "offset": 28,
        "slot": "10",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ObscurityToken)7375": {
        "encoding": "inplace",
        "label": "contract ObscurityToken",
        "numberOfBytes": "20"
      },
      "t_enum(EscrowState)5618": {
        "encoding": "inplace",
        "label": "enum Auction.EscrowState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_string_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string[])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_address,t_struct(ActiveAuctioneer)5662_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Auction.ActiveAuctioneer)",
        "numberOfBytes": "32",
        "value": "t_struct(ActiveAuctioneer)5662_storage"
      },
      "t_mapping(t_address,t_struct(UserBids)5670_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Auction.UserBids)",
        "numberOfBytes": "32",
        "value": "t_struct(UserBids)5670_storage"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_string_memory_ptr,t_struct(AuctionItem)5654_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct Auction.AuctionItem)",
        "numberOfBytes": "32",
        "value": "t_struct(AuctionItem)5654_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ActiveAuctioneer)5662_storage": {
        "encoding": "inplace",
        "label": "struct Auction.ActiveAuctioneer",
        "members": [
          {
            "astId": 5656,
            "contract": "contracts/Auction.sol:Auction",
            "label": "stakedAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5659,
            "contract": "contracts/Auction.sol:Auction",
            "label": "activeAuctions",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 5661,
            "contract": "contracts/Auction.sol:Auction",
            "label": "isInitialized",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(AuctionItem)5654_storage": {
        "encoding": "inplace",
        "label": "struct Auction.AuctionItem",
        "members": [
          {
            "astId": 5620,
            "contract": "contracts/Auction.sol:Auction",
            "label": "itemId",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 5622,
            "contract": "contracts/Auction.sol:Auction",
            "label": "itemName",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 5624,
            "contract": "contracts/Auction.sol:Auction",
            "label": "itemDescription",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 5626,
            "contract": "contracts/Auction.sol:Auction",
            "label": "hashOfImage",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 5628,
            "contract": "contracts/Auction.sol:Auction",
            "label": "seller",
            "offset": 0,
            "slot": "4",
            "type": "t_address_payable"
          },
          {
            "astId": 5630,
            "contract": "contracts/Auction.sol:Auction",
            "label": "reservePrice",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 5632,
            "contract": "contracts/Auction.sol:Auction",
            "label": "highestBid",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 5634,
            "contract": "contracts/Auction.sol:Auction",
            "label": "highestBidder",
            "offset": 0,
            "slot": "7",
            "type": "t_address_payable"
          },
          {
            "astId": 5636,
            "contract": "contracts/Auction.sol:Auction",
            "label": "auctionEndTime",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 5638,
            "contract": "contracts/Auction.sol:Auction",
            "label": "ended",
            "offset": 0,
            "slot": "9",
            "type": "t_bool"
          },
          {
            "astId": 5640,
            "contract": "contracts/Auction.sol:Auction",
            "label": "deliveryAddress",
            "offset": 0,
            "slot": "10",
            "type": "t_string_storage"
          },
          {
            "astId": 5643,
            "contract": "contracts/Auction.sol:Auction",
            "label": "privateChatLogs",
            "offset": 0,
            "slot": "11",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 5646,
            "contract": "contracts/Auction.sol:Auction",
            "label": "committeeChatLogs",
            "offset": 0,
            "slot": "12",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 5649,
            "contract": "contracts/Auction.sol:Auction",
            "label": "escrowState",
            "offset": 0,
            "slot": "13",
            "type": "t_enum(EscrowState)5618"
          },
          {
            "astId": 5651,
            "contract": "contracts/Auction.sol:Auction",
            "label": "yesVotes",
            "offset": 1,
            "slot": "13",
            "type": "t_uint8"
          },
          {
            "astId": 5653,
            "contract": "contracts/Auction.sol:Auction",
            "label": "noVotes",
            "offset": 2,
            "slot": "13",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "448"
      },
      "t_struct(UserBids)5670_storage": {
        "encoding": "inplace",
        "label": "struct Auction.UserBids",
        "members": [
          {
            "astId": 5665,
            "contract": "contracts/Auction.sol:Auction",
            "label": "auctionIds",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 5669,
            "contract": "contracts/Auction.sol:Auction",
            "label": "auctionExists",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_string_memory_ptr,t_bool)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}